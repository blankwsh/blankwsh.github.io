import{_ as c,r as e,o as l,c as u,a as n,b as p,d as a,e as t}from"./app-DHHNIcXM.js";const k="/assets/directive-DtZKvoAo.png",i="/assets/lifecycle-W0MNXI0C.png",r="/assets/transition-classes-DYG5-69l.png",d={},g=t(`<h1 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>Vue</span></a></h1><h2 id="创建一个-vue-项目" tabindex="-1"><a class="header-anchor" href="#创建一个-vue-项目"><span>创建一个 Vue 项目</span></a></h2><ol><li>确保安装最新版 Node（可以通过 n 来获取最新版 Node）以及 npm（或其他包管理工具）</li><li>转到即将创建项目的目录下</li><li>运行脚手架命令<code>npm create vue@latest</code>，根据提示键入项目相关信息</li><li>项目基本框架创建完成，可以通过<code>npm run dev</code>来运行项目</li><li>完成项目开发后，运行命令<code>npm run build</code>将应用发布到生产环境</li></ol><h2 id="vue-的核心功能" tabindex="-1"><a class="header-anchor" href="#vue-的核心功能"><span>Vue 的核心功能</span></a></h2><p>Vue 的两个核心功能分别是<strong>声明式渲染</strong>和<strong>响应性</strong>。声明式渲染：Vue 基于标准 HTML 创建了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。响应性：Vue 会自动追踪 JavaScript 状态并在其发生变化时响应式地更新 DOM。</p><p>声明式渲染：模板语法使得我们可以声明式地描述 HTML 和 JavaScript 之间的关系；响应式：Javascript 状态变化时，DOM 也自动随之变化。</p><h2 id="单文件组件" tabindex="-1"><a class="header-anchor" href="#单文件组件"><span>单文件组件</span></a></h2><p>单文件组件（Single-File Component）是指用类似 HTML 格式的文件（.vue 文件）来书写 Vue 组件。Vue 的单文件组件会将一个组件的模板（HTML）、样式（CSS）和逻辑（JavaScript）封装在同一个文件里。如下为一个单文件组件的基本构成：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="vue-的-api-风格" tabindex="-1"><a class="header-anchor" href="#vue-的-api-风格"><span>Vue 的 API 风格</span></a></h2><p>Vue 的 API 风格有两种，分别是<strong>选项式 API</strong>和<strong>组合式 API</strong>，选项式 API 是基于组合式 API 实现的。两种 API 的主要区别在于<strong>对组件逻辑的描述方式的不同</strong>。</p><p>选项式 API 以组件实例（this）为中心，使用<strong>包含多个选项的对象</strong>（<code>export default {}</code>）来描述组件的逻辑，如<code>data</code>、<code>methods</code>、<code>mounted</code>等，选项所定义的属性都会暴露在函数内部的<code>this</code>上，<code>this</code>指向<strong>当前的组件实例</strong>。</p><p>组合式 API 直接在函数作用域内定义响应式状态变量，使用<strong>导入的 API 函数</strong>(<code>import { ref } from &#39;vue&#39;</code>)来描述组件的逻辑，如<code>ref()</code>、<code>onMounted()</code>等，在单文件组件中，组合式 API 通常会与<code>&lt;script setup&gt;</code>搭配使用，setup 标识告诉 Vue 在编译时需要进行一些处理，帮助我们更简洁地使用组合式 API，<code>&lt;script setup&gt;</code>中的导入和顶层变量/函数都能够在模板中直接使用。</p><h2 id="使用-vue-的方法" tabindex="-1"><a class="header-anchor" href="#使用-vue-的方法"><span>使用 Vue 的方法</span></a></h2><h3 id="整个项目使用-vue-框架" tabindex="-1"><a class="header-anchor" href="#整个项目使用-vue-框架"><span>整个项目使用 Vue 框架</span></a></h3><p>当你想要在整个项目中使用 Vue 框架时，可以通过<code>npm create vue@latest</code>快速创建一个项目基本框架。</p><h3 id="局部使用-vue-框架" tabindex="-1"><a class="header-anchor" href="#局部使用-vue-框架"><span>局部使用 Vue 框架</span></a></h3><p>当你想要在项目的局部使用 Vue 框架来增强静态的 HTML 或后端框架集成时，可以通过 CDN 来使用 Vue。使用 CDN 将<strong>不涉及构建步骤</strong>，同时你将<strong>无法使用单文件组件语法</strong>。通过 CDN 使用 Vue 可以分为<strong>使用全局构建版本</strong>和<strong>使用 ES 模块构建版本</strong>。</p><p>使用全局构建版本的例子如下，需要注意的是，script 标签引入的是 vue 的全局版本 vue.global.js，该版本的所有顶层 API 都以属性的形式暴露在全局对象 Vue 上，因此你需要通过解构赋值来获取相应的 API。</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/vue@3/dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token operator">=</span> Vue<span class="token punctuation">;</span>
  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>使用 ES 模块构建版本的例子如下，需要注意的是，script 标签引入的是 vue 的 ES 模块构建版本 vue.esm-browser.js，且使用了<code>type = module</code>的 script 标签，使用 API 通过 ES 模块的 import 语法导入。(注意，ES 模块不能通过 file 协议工作)</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span><span class="token punctuation">;</span>
  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法"><span>模板语法</span></a></h2><p>模板语法基于 HTML，使我们能<strong>声明式</strong>地将 Vue 组件实例的<strong>数据绑定到相应的 DOM</strong>上，在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。</p><p>Vue 的模板语法的数据绑定方式可以分为文本插值（双大括号）和使用指令绑定（v-bind、v-html 等）。</p><h3 id="文本插值" tabindex="-1"><a class="header-anchor" href="#文本插值"><span>文本插值</span></a></h3><p>双大括号内的内容会被替换为当前组件实例中同名属性的值，每次组件实例中同名属性的值发生变化时，双大括号内的内容也会同步改变。需要注意的是，双大括号中的内容<strong>仅支持单一的 JavaScript 表达式</strong>，也就是一段可以被求值的 JavaScript 代码（判断方式：该表达式是否可以放在 return 之后），且在双大括号内<strong>仅能访问到有限的全局对象</strong>（如 Math、Date）。</p><h3 id="指令" tabindex="-1"><a class="header-anchor" href="#指令"><span>指令</span></a></h3><p>指令是带有<code>v-</code>这一特殊前缀的 Attribute，常用的指令有<code>v-bind</code>、<code>v-on</code>、<code>v-for</code>、<code>v-slot</code>、<code>v-if</code>、<code>v-model</code>、<code>v-html</code>、<code>v-text</code>等，完整的指令语法如下，分为<strong>指令名、指令参数、指令修饰符和指令值</strong>。</p><p><img src="`+k+`" alt="指令"> 指令名与指令参数之间用冒号隔开做标识，指令参数用于告诉指令将指令值绑定到哪一个 Attribute 上（<code>v-bind:href = &#39;xxx&#39;</code>表示指令参数 href 告诉指令 v-bind 将指令值 xxx 绑定到属性 href 上）。指令参数还可以是<strong>动态指令参数</strong>，动态指令参数用中括号包裹，如<code>v-on:[attributeName] = &#39;xxx&#39;</code>，这里的 attributeName 是当前组件实例的属性——attributeName 对应的值，也可以是一个单一表达式。需要注意的是，组件实例中 attributeName 对应的值<strong>必须是一个 String 或者 null</strong>（null 表示显示移除该绑定），如果是单一表达式，<strong>不允许出现空格或引号等字符</strong>，因此通常使用计算属性进行代替。</p><p>指令修饰符是以点开头的特殊后缀，表明指令需要以一些特定的方式进行绑定。</p><p><code>v-on</code>的指令修饰符分为<strong>事件修饰符</strong>和<strong>按键修饰符</strong>。事件修饰符有<code>.capture</code>（开启事件捕获流）、<code>.once</code>（事件只触发一次）、<code>.stop</code>（阻止事件冒泡）、<code>self</code>（当且仅当 target==currentTarget 才会触发事件）、<code>.prevent</code>（阻止事件的默认行为，如提交表单后的自动跳转）、<code>.passive</code>（一般用于触摸事件的监听器，用于改善移动端设备的滚屏性能）。按键修饰符常用于监听键盘事件，当按下某一特殊按键时触发对应函数，常用的按键修饰符有<code>.enter</code>、<code>.tab</code>、<code>.delete</code>、<code>.esc</code>、<code>.space</code>（前面的均为使用了按键别名的修饰符）、<code>ctrl</code>、<code>shift</code>、<code>alt</code>、<code>meta</code>（这四个均为系统按键修饰符）、<code>.left</code>、<code>.middle</code>、<code>.right</code>（这三个为鼠标按键对应的事件特有的修饰符）。系统按键修饰符与常规按键的不同之处在于，前者在与 keyup 事件一起使用时，事件发出时必须处于按下状态，且不能只按下系统按键，必须搭配其他常规按键或者点击事件使用（如：<code>@keyup.ctrl.c</code>、<code>@click.ctrl</code>）。需要注意的是，指令修饰符可以<strong>链式书写</strong>，且<strong>区分先后</strong>（<code>@click.prevent.self</code>与<code>@click.self.prevent</code>是不同的）。</p><p>针对表单事件，Vue 还提供了三个特殊的事件修饰符，分别是<code>.lazy</code>、<code>.number</code>、<code>.trim</code>，默认情况下，<code>v-model</code>会在每次<code>input</code>事件后修改数据，使用了<code>.lazy</code>修饰符则会在<code>change</code>事件后(输入框失去焦点)修改数据； <code>.number</code>修饰符用于限定输入的数据只能为数值（需要注意的是，+-.e 等数学特定符号也可以输入），该修饰符在<code>&lt;input type=&#39;number&#39;&gt;</code>会自动启用；<code>.trim</code>用于自动去除用户输入两端的空格。</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- .exact修饰符，与按键修饰符一同使用 --&gt;</span>
<span class="token comment">&lt;!-- 不使用.exact修饰符时，以下点击事件会在ctrl和其他任意按键同时按下时触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 使用.exact修饰符时，以下点击事件会在仅按下ctrl时触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.ctrl.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 使用.exact修饰符时，以下点击事件仅在不按下任意按键时触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>常用的指令简写有如下：</p><ol><li>v-bind:attr = &quot;a&quot; <span style="color:red;">==&gt;</span> :attr = &quot;a&quot;</li><li>v-on:click = &quot;onClick&quot; <span style="color:red;">==&gt;</span> @click = &quot;onClick&quot;</li><li>v-slot:header <span style="color:red;">==&gt;</span> #header</li><li>v-bind:attr = &quot;attr&quot; <span style="color:red;">==&gt;</span> :attr（此简写仅在 Vue3.4 以上的版本被支持）</li><li>若存在一个对象 obj = { a: 1, b: 2 }，则 v-bind:a = &quot;obj.a&quot; v-bind:b = &quot;obj.b&quot; <span style="color:red;">==&gt;</span> v-bind:obj = &quot;obj&quot;</li></ol><h2 id="响应式" tabindex="-1"><a class="header-anchor" href="#响应式"><span>响应式</span></a></h2><p>响应式是指当状态（数据）变化时，页面能够根据状态的变化进行相应的更新。在 Vue3 的组合式 API 中，使用 ref()函数和 reactive()函数用于声明响应式状态。对于使用 ref 声明的响应式状态，访问时通常需要使用<code>.value</code>进行访问，但也有特殊情况，具体如下：</p><ol><li>判断 ref 是否处在顶层</li></ol><p>1.1 是：判断在何处引用该变量</p><p>1.1.1 在<code>&lt;script setup&gt;</code>中，则需要使用<code>.value</code>进行访问（<span style="color:red;">例 2 和例 3 对 as 的访问</span>）</p><p>1.1.2 在模板中，则不需要使用<code>.value</code>进行访问</p><p>1.2 否：判断外层是否为 reactive 或者 ref</p><p>1.2.1 否：则需要使用<code>.value</code>进行访问（<span style="color:red;">例 5 对 a 的访问</span>）</p><p>1.2.2 是：判断外层的 reactive 或者 ref 的参数是否为对象</p><p>1.2.2.1 是：则不需要使用<code>.value</code>进行访问（<span style="color:red;">例 1 和例 2 对 a 的访问</span>）</p><p>1.2.2.2 否：则需要使用<code>.value</code>进行访问（<span style="color:red;">例 3 和例 4 对数组第一个元素的访问</span>）</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 例1，在&lt;script setup&gt;中访问a使用as.a</span>
<span class="token keyword">const</span> <span class="token keyword">as</span> <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 例2，在&lt;script setup&gt;中访问a使用as.value.a</span>
<span class="token keyword">const</span> <span class="token keyword">as</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 例3，在&lt;script setup&gt;中访问a使用as.value[0].value</span>
<span class="token keyword">const</span> <span class="token keyword">as</span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 例4，在&lt;script setup&gt;中访问a使用as[0].value</span>
<span class="token keyword">const</span> <span class="token keyword">as</span> <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 例5，在&lt;script setup&gt;中访问a使用as.a.value</span>
<span class="token keyword">const</span> <span class="token keyword">as</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>总结：使用 ref 声明的<strong>顶层属性</strong>会自动解包（不需要<code>.value</code>）；使用 ref 声明的<strong>非顶层属性</strong>，如果是<strong>reactive 或者 ref 作为父层</strong>且<strong>reactive 或者 ref 的参数为对象</strong>（只能是对象，数组、Map 等其他集合类型都不可以），那么 ref 会自动解包。此外还要注意的是，reactive 的参数只能是对象、数组或集合类型，其他类型均不可以。</p><p>使用 ref 的原因：当一个组件首次渲染时，Vue 会追踪在渲染过程中使用的每一个 ref。然后，当一个 ref 被修改时，它会触发追踪它的组件的一次重新渲染。当你修改了响应式状态时，DOM 会被自动更新。但是需要注意的是，DOM 更新不是同步的。Vue 会在<code>nextTick</code>更新周期中缓冲所有状态的修改，以确保不管你进行了多少次状态修改，每个组件都只会被更新一次。</p><p>reactive 的局限性：有限的值类型（参数只能是集合类型）、不能直接替换整个对象（会丢失响应式）、对解构操作不友好（解构时会丢失响应式）</p><h3 id="vue-的响应式是如何做到的" tabindex="-1"><a class="header-anchor" href="#vue-的响应式是如何做到的"><span>Vue 的响应式是如何做到的</span></a></h3><p>原生 JavaScript 并没有提供任何机制来直接追踪<strong>局部变量</strong>的读写，但是，它提供了两种可用于追踪<strong>对象属性</strong>的读写的方式，一种是 Vue2 采用的方式：使用 getter/setter（出于旧版浏览器的限制），另一种则是 Vue3<strong>响应式对象</strong>（reactive）采用的方式：使用 Proxy（ref 声明的响应式状态仍采用了 getter/setter）；相关伪代码如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 读该对象属性时，订阅追踪该对象属性(该对象属性成为当前副作用的一个依赖，同时将该副作用存储在该对象属性对应的Set集合中)</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
      <span class="token comment">// 写该对象属性时，同时修改订阅了该对象属性的变量(对象属性修改时，根据该对象属性对应的Set集合通知将该对象属性作为依赖的副作用重新执行副作用计算新值)</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> refObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>refObject<span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>refObject<span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> refObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// activeEffect用于存储当前正在活跃的副作用</span>
<span class="token keyword">let</span> activeEffect<span class="token punctuation">;</span>
<span class="token comment">// 访问对象属性时会调用track函数</span>
<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果当前存在正在活跃的副作用</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEttect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取被访问的对象属性对应的Set集合</span>
    <span class="token keyword">const</span> effectsSet <span class="token operator">=</span> <span class="token function">getSubscribersForProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将当前活跃的副作用添加到该Set集合中</span>
    effectsSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取当前被修改的对象属性对应的Set集合</span>
  <span class="token keyword">const</span> effectsSet <span class="token operator">=</span> <span class="token function">getSubscribersForProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 依次执行Set集合中的所有副作用</span>
  effectsSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个响应式副作用，watchEffect也可以做到</span>
<span class="token keyword">function</span> <span class="token function">whenDepsChange</span><span class="token punctuation">(</span><span class="token parameter">update</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> effect<span class="token punctuation">;</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,57),v={href:"https://cn.vuejs.org/guide/extras/reactivity-in-depth.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/7124351370521477128?searchId=20240304113619FA34158AF13F0C120F79",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性"><span>计算属性</span></a></h2><p>如果在模板中书写太多逻辑，就会使模板变得难以维护，可以通过使用计算属性来解决这一问题。一个计算属性仅会在<strong>其响应式依赖发生变化</strong>才重新计算。（区别于方法，方法调用总是在<strong>重渲染发生</strong>时重新执行函数）计算属性默认是只读的，如果需要使用可写的对象属性，需要采用计算属性的对象式写法，如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> firstName<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> lastName<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>firstName<span class="token punctuation">.</span>value<span class="token punctuation">,</span> lastName<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>尽管计算属性提供了可写的形式，但仍要尽量避免直接修改计算属性的值。此外，应避免在 getter 中产生副作用（如改变其他状态、异步请求、修改 DOM 等，如果需要这些操作，应该选用侦听器而不是计算属性）。</p><p>计算属性具有缓存功能，只有在依赖的响应式状态发生变化时才会发生变化。</p><h2 id="class-和-style-属性的-v-bind-用法的特殊增强" tabindex="-1"><a class="header-anchor" href="#class-和-style-属性的-v-bind-用法的特殊增强"><span>class 和 style 属性的 v-bind 用法的特殊增强</span></a></h2><p>除了 HTML 传统的绑定一个字符串外，class 和 style 在 v-bind 下还可以绑定一个对象或者数组，如下所示：</p>`,7),h=t(`<h2 id="v-if-和-v-show-的区别" tabindex="-1"><a class="header-anchor" href="#v-if-和-v-show-的区别"><span>v-if 和 v-show 的区别</span></a></h2><p>v-if 是真实地按照条件进行渲染时，条件切换时，条件区块内的事件监听器和子组件都会被重新销毁和创建，且如果初次渲染时条件为 false，则不会渲染条件区块，直至条件改变为 true（v-if 是惰性的）。与之不同的是，v-show 无论条件是否为真，始终会被渲染，其本质是修改区域的 display 属性。因此，v-if 有更高的切换开销，v-show 有更高的初始渲染开销。</p><h2 id="v-if-和-v-for" tabindex="-1"><a class="header-anchor" href="#v-if-和-v-for"><span>v-if 和 v-for</span></a></h2><p>不要在同一个元素上同时使用 v-if 和 v-for，因为 v-if 的优先级比 v-for 的高，这也就意味着 v-if 的条件无法访问到 v-for 作用域内定义的变量别名，如下所示：</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 事实上v-if并不能访问到item --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.isTrue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item.id }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 修改如下，在外包装一层template --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.isTrue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item.id }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="v-for-的注意事项" tabindex="-1"><a class="header-anchor" href="#v-for-的注意事项"><span>v-for 的注意事项</span></a></h2><ol><li>(value, key, index) in items，通常情况下只使用 value in items，这里的 value 如果是一个对象可以使用解构赋值，in 运算符可以用 of 进行替代。</li><li>多层嵌套的 v-for，子层可以访问到父层的作用域。</li><li>items 不仅可以是数组，还可以是一个对象，数组是一种特殊的对象。</li><li>items 还可以是一个整数值，如 n in 10，则会重复渲染该区域 10 次，注意这里的初始值是 1 而不是 0。</li><li>对 items 使用变更方法（七种）时，应尽量避免修改原数组，可以通过展开语法(...)创建一个数组的副本，如[...items]。</li><li>未指定 key 时，默认将 index 作为 key，但这是不被推荐的。</li><li>key 值的类型应当是 number/string/symbol，不能是 object 等其他类型。</li></ol><h2 id="v-for-中的-key" tabindex="-1"><a class="header-anchor" href="#v-for-中的-key"><span>v-for 中的 key</span></a></h2><p>在 Vue 中，key 是用于识别 VNode 的特殊属性。在 Vue 进行列表渲染时，每个 VNode 都需要一个唯一的 key 属性，以便 Vue 能够跟踪每个节点的身份，从而高效地重新渲染列表中的元素。当列表数据发生变化时，key 能够帮助 Vue 识别出哪些元素是新增的、删除的或移动的，从而避免不必要的重排和重新渲染，提高性能。</p><p>应当尽量避免使用 index 作为列表渲染的 key，因为当列表数据发生变化时，如果仅仅依赖于 index 作为 key，在元素的顺序发生变化时，Vue 可能会错误地认为元素已经被替换或者移动，从而引发不必要的 DOM 更新。如下：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> datas <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对页面的元素内容进行修改，同时删除索引为2的元素，观察使用不同的key时最后一个元素的变化</span>
  <span class="token comment">// 使用index作为key时，由于最后一个元素的index从3变为2，key发生变化，因此Vue会对该元素重新进行渲染</span>
  <span class="token comment">// 使用data.id作为key时，删除元素不会导致该元素的key发生变化，因此最后一个元素的修改仍会被保存，没有被重新渲染</span>
  document
    <span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>innerText <span class="token operator">=</span> ele<span class="token punctuation">.</span>innerText <span class="token operator">+</span> ele<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  datas<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 此处的key应当使用data.id，减少不必要的DOM更新 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(data, index) in datas<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ data.value }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>click<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="事件处理的注意事项" tabindex="-1"><a class="header-anchor" href="#事件处理的注意事项"><span>事件处理的注意事项</span></a></h2><ol><li>事件处理器分为内联事件处理器和方法事件处理器。</li><li>方法事件处理器对应的方法可以接收一个事件参数 event，用于访问 DOM 元素（even.target）。</li></ol>`,13),y=n("ol",{start:"3"},[n("li",null,"内联事件处理器在调用方法时也可以借助$event 访问事件参数。")],-1),q=n("h2",{id:"v-model",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#v-model"},[n("span",null,"v-model")])],-1),b=n("p",null,[n("code",null,"v-model"),p("是 Vue 提供的用于简化表单输入绑定这一过程的语法糖，其形式如下：")],-1),w=t('<p>文本类型的<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>会绑定 value 属性并监听 input 事件，<code>&lt;input type=&quot;radio&quot;&gt;</code>和<code>&lt;input type=&quot;checkbox&quot;&gt;</code>会绑定 checked 属性并监听 change 事件，<code>&lt;select&gt;</code>会绑定 value 属性并监听 change 事件。</p><p>v-model 会忽视任何表单元素上初始的 value、checked 和 selected 属性。</p><p><code>&lt;textarea&gt;</code>不支持文本插值（双大括号），应使用 v-model 代替。</p><p><code>&lt;input type=&quot;checkbox&quot;&gt;</code>在绑定时，可将多个复选框绑定到一个数组上，该数组将始终包含当前被选中的框的值。(这里的复选框必须指定 value)</p><p>使用单个<code>&lt;input type=&quot;checkbox&quot;&gt;</code>时，其绑定的值应为布尔类型。Vue 还为单个的复选框提供了<code>true-value</code>和<code>false-value</code>两个属性，仅支持与 v-model 配套使用，当复选框被选中时绑定的值修改为<code>true-value</code>，反之为<code>false-value</code>。</p><h2 id="生命周期钩子" tabindex="-1"><a class="header-anchor" href="#生命周期钩子"><span>生命周期钩子</span></a></h2><p>每个 Vue 组件实例在创建时都需要经历一系列初始化步骤（数据侦听、模板编译、挂载 DOM 等），在初始化的过程，Vue 还会运行一种名叫生命周期钩子的函数，方便开发者能够在组件实例初始化的各个过程中运行自己的代码。</p><p>组件实例初始化的流程及相应的生命周期钩子如下图所示：</p><p><img src="'+i+`" alt="生命周期钩子"><code>setup()</code>会在<code>beforeCreate()</code>和<code>created()</code>之前被调用。<code>beforeCreate()</code>在组件实例初始化完成之后立即调用；<code>created()</code>在组件实例处理完所有与状态相关的选项（data、methods、computed、watch 等）后调用，此阶段不能访问$el，因为组件还未被挂载；<code>mounted()</code>在组件被挂载（所有同步子组件被挂载、自身的 DOM 树已经创建完成并插入到父容器中）之后调用；<code>updated()</code>在组件因为一个响应式状态变更而更新其 DOM 树之后调用，注意不要在<code>updated()</code>中更新组件的状态。<code>unmounted()</code>在一个组件实例被卸载（所有子组件被卸载、所有相关的响应式作用都已停止）后调用。</p><p>子组件的 before 钩子比父组件的 before 钩子<strong>后</strong>执行，子组件的非 before 钩子比父组件的非 before 钩子<strong>先</strong>执行。</p><h2 id="侦听器" tabindex="-1"><a class="header-anchor" href="#侦听器"><span>侦听器</span></a></h2><p>侦听器用于在状态发生变化时执行一些副作用（更改 DOM、网络请求等）。</p><p><code>watch</code>侦听的数据源可以是 ref、reactive、getter 函数或者由多个来源组成的数组，注意不能是其他类型，比如一个响应式对象的某个属性，因为对象的属性并不是响应式的，这种情况应当使用 getter 进行代替。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 单个 ref</span>
<span class="token function">watch</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newX</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">x is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newX<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// getter 函数</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>value <span class="token operator">+</span> y<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sum of x + y is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 多个来源组成的数组</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> y<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>newX<span class="token punctuation">,</span> newY<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">x is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newX<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and y is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>如果侦听的数据源是一个响应式对象，那么该侦听器会隐式地转换为一个深层侦听器；如果侦听的数据源是一个 getter 函数，那么该侦听器则只是一个浅层侦听器，需要通过<code>{ deep: true }</code>来显示转换成深层侦听器。深层侦听器的开销很大，应只在必要时启用。侦听器默认是懒执行的，可以通过<code>{ immediate: true }</code>使侦听器在创建时立即执行一遍回调。(一次性侦听器<code>{ once:true }</code>)好像还不可以使用。</p><p>当侦听器回调中使用的响应式状态与侦听的数据源完全相同时，可以使用<code>watchEffect()</code>来代替<code>watch()</code>，<code>watchEffect()</code>允许我们自动跟踪回调中的响应式依赖，不再需要显式声明数据源。<code>watchEffect()</code>的回调会立即执行，因此不需要指定<code>{ immediate: true }</code>。</p><p><code>watch()</code>只侦听数据源（回调中出现的其它响应式状态不会被侦听），且仅在数据源发生改变时才会触发回调（不设置 immediate 的情况下），同时还会<strong>避免</strong>在副作用发生时追踪依赖；<code>watchEffect()</code>在同步执行的过程中侦听所有在回调中出现的响应式状态，且侦听器在创建时就会立即执行一次回调，副作用<strong>发生期间</strong>进行依赖追踪。</p><p>默认情况下，侦听器回调会在<strong>父组件更新之后</strong>、<strong>所属组件的 DOM 更新之前</strong>被调用，所以如果在侦听器的回调中访问的 DOM 是<strong>更新前</strong>的 DOM，要访问更新后的 DOM，可以使用配置项<code>{ flush: &#39;post&#39; }</code>，也可以使用<code>watchPostEffect()</code>这一 API 快速实现。</p><p>配置项<code>{ flush: &#39;sync&#39; }</code>用于创建同步侦听器，<code>watchSyncEffect()</code>同理。</p><p>同步语句创建的侦听器通常会在宿主组件卸载时自动停止，异步语句中的侦听器则不会（不建议在异步环境下创建侦听器），此时你需要手动停止侦听器，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> unwatch <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止侦听器</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="模板引用" tabindex="-1"><a class="header-anchor" href="#模板引用"><span>模板引用</span></a></h2><p>如果我们需要访问某一 DOM 节点，可以在该 DOM 节点上增加一个<code>ref</code>属性，这样我们就可以在组合式 API 中设置同名变量来访问该 DOM 节点，如下：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myP <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意必须同名</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myP<span class="token punctuation">.</span>value<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myP<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>v-for</code>中的 ref 应当是一个<strong>数组</strong>，且该 ref 数组并不保证与源数组同序。</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myRefs <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myRefs<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n in 5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myRefs<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ n }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>除了使用字符串作为模板引用的名字外，ref 还可以<strong>动态</strong>绑定一个函数，这个函数接收一个参数 el，表示当前的 DOM 节点，这个函数会在每次组件更新时被调用，DOM 节点被卸载时也会被调用一次。</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isShow <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 接收的参数el为绑定的DOM节点</span>
<span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this function was called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// DOM节点卸载时el为null</span>
  myRef<span class="token punctuation">.</span>value <span class="token operator">=</span> el<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 注意这里的ref必须使用动态绑定形式 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>method<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 更新组件会调用method --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>add count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- DOM节点卸载会调用method --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow = !isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>remove p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>父组件可以通过给子组件添加 ref 属性来获取子组件的组件实例，但子组件不能使用<code>&lt;script setup&gt;</code>，因为使用了<code>&lt;script setup&gt;</code>的组件是默认私有的，父组件只能获取子组件通过<code>defineExpose</code>暴露出来的属性。</p><h2 id="组件注册" tabindex="-1"><a class="header-anchor" href="#组件注册"><span>组件注册</span></a></h2><p>一个 Vue 组件在使用前必须先进行注册，组件组册有两种方式，全局注册和局部注册。</p><p>在组合式 API 中，全局注册可以通过 Vue 应用实例上的<code>.component()</code>方法实现，该方法需要两个参数，参数一是组件组册的名字（通常与组件名保持一致），参数二是组件的实现（通常通过 import 直接导入），如下所示：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;Child&quot;</span><span class="token punctuation">,</span> Child<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>全局注册的组件在当前 Vue 应用中全局可用，但全局注册的组件即使在 Vue 应用中没有被实际使用，在生产打包的过程中也不会被自动移除（tree-shaking），同时全局组册的组件在大型项目中组件之间的依赖关系并不明确，项目的可维护性较低。</p><p>相比之下，局部注册的组件需要在父组件中导入，并且只能在父组件中使用，因此项目的依赖关系更明确，同时局部注册的组件对 tree-shaking 更友好。如果在<code>&lt;script setup&gt;</code>中导入组件，导入的组件无需自行注册即可在模板中使用，非<code>&lt;script setup&gt;</code>的环境下需要使用 component 配置项进行组册。</p><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props"><span>props</span></a></h2><p>props 是一种特殊的属性，通过 props 父组件可以向子组件传递数据(单向数据流)。<code>&lt;script setup&gt;</code>中子组件需要通过使用<code>defineProps()</code>宏（宏无需导入即可使用）来显示声明接收的 props（方便 Vue 区分哪些是 props 哪些是透传 attribute）。非<code>&lt;script setup&gt;</code>的环境下需要使用 prop 配置项接收父组件传入的数据，同时 prop 对象会作为 setup 函数的第一个参数传入。</p><p>声明 prop 有两种方式，一种是数组，另一种是对象，如下所示：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 数组形式的props</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在script中通过props.a访问，在模板中可以直接通过a访问</span>
<span class="token comment">// 对象形式的props</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// 接收的a的类型为字符串</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token comment">// 接收的b的类型为数值</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>如果组件中存在和 prop 同名的属性，则在模板中访问该 prop 则需要使用 props.a 的访问形式，否则模板中将会以当前组件中的属性值作为优先值。</p><p>所有 prop 默认都是可选的，除非设置<code>required: true</code>；除 Boolean 外的未传递的可选 prop 都会有一个默认值 undefined，Boolean 则是 false；可以通过设置<code>defalut</code>属性来修改默认值，如果声明了<code>defalut</code>，显示传入的 undefined 也会被转化为<code>defalut</code>值；如果<code>type</code>为 null 或者 undefined，则会跳过任何类型检查；可以通过将<code>type</code>设置为一个数组来表示该 prop 可以为多种类型的值；对象的<code>defalut</code>属性应设置为一个工厂函数，该函数接收原始的 prop 作为第一个参数；<code>validator</code>可以进行更精细的 prop 校验。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 多种可能的类型</span>
  <span class="token literal-property property">propA</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 对象类型的默认值</span>
  <span class="token literal-property property">propB</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
    <span class="token comment">// 对象或数组的默认值</span>
    <span class="token comment">// 必须从一个工厂函数返回。</span>
    <span class="token comment">// 该函数接收组件所接收到的原始 prop 作为参数。</span>
    <span class="token keyword">default</span><span class="token punctuation">(</span>rawProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 自定义类型校验函数</span>
  <span class="token comment">// 在 3.4+ 中完整的 props 作为第二个参数传入</span>
  <span class="token literal-property property">propC</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">validator</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// The value must match one of these strings</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;warning&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;danger&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 函数类型的默认值</span>
  <span class="token literal-property property">propD</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
    <span class="token comment">// 不像对象或数组的默认，这不是一个</span>
    <span class="token comment">// 工厂函数。这会是一个用来作为默认值的函数</span>
    <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Default function&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="组件事件" tabindex="-1"><a class="header-anchor" href="#组件事件"><span>组件事件</span></a></h2><p>组件事件用于子组件向父组件传递数据。子组件可以通过<code>$emit</code>在模板中触发父组件上的自定义事件，而在非模板的<code>&lt;script setup&gt;</code>环境下，首先通过<code>defineEmits()</code>宏声明子组件要触发的事件，该宏会返回一个函数供我们触发父组件的自定义事件（非<code>&lt;script setup&gt;</code>环境与 props 类似），如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Child.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;someEvent&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;otherEvent&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">myEmit</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">&quot;otherEvent&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;someEvent&#39;)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>emit someEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 子组件Child传递参数1给父组件Parent触发otherEvent事件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myEmit(1)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>emit otherEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Parent.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">someEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;emit!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">otherEvent</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">.</span>value <span class="token operator">=</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@some-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>someEvent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@other-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>otherEvent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>如果需要对自定义事件进行参数验证，可以将事件赋值成一个函数，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 无需校验</span>
  <span class="token literal-property property">someEvent</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token comment">// 对参数n进行校验（只会在控制台提出警告，不会影响实际渲染）</span>
  <span class="token function-variable function">otherEvent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="v-model-在组件上的使用" tabindex="-1"><a class="header-anchor" href="#v-model-在组件上的使用"><span>v-model 在组件上的使用</span></a></h2><p><code>v-model</code>在组件上使用可以实现数据在父子组件上的双向绑定，使用时需配合 props 和 emits 使用（Vue3.4 以上的版本可以使用<code>defineModel</code>宏简化代码），如下所示:</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Parent.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token comment">&lt;!-- 父组件修改，子组件会同步修改 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count += &#39;!&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>add a !<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Child.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;modelValue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;update:modelValue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 子组件修改，父组件也会同步修改 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
    <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modelValue<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;update:modelValue&#39;, $event.target.value)<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 如果使用defineModel，子组件的代码可进一步简化 --&gt;</span>
<span class="token comment">&lt;!-- Child.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token function">defineModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>v-model</code>还可以携带一个指令参数，用于区分同一组件上的多个<code>v-model</code>，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Parent.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name"><span class="token namespace">v-model:</span>count</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  count: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
  msg: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Child.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// defineModel还可以传入与props相同的配置项</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">defineModel</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">defineModel</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>除了内置的<code>.trim</code>、<code>.number</code>、<code>.lazy</code>这三个<code>v-model</code>的修饰符，我们还可以自定义组件中的<code>v-model</code>的事件修饰符，注意，使用时应在父组件上的<code>v-model</code>上加上该修饰符而不是子组件上的，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> <span class="token punctuation">[</span>model<span class="token punctuation">,</span> modifiers<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">defineModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>capitalize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="透传-attribute" tabindex="-1"><a class="header-anchor" href="#透传-attribute"><span>透传 Attribute</span></a></h2><p>透传 Attribute 是指被传递给一个<strong>组件</strong>，但却没有被声明成 props 或者 emits 的属性或 v-on 事件监听器，常见的透传 Attribute 有 class、style 和 id。</p><p>当一个组件<strong>以单个元素为根</strong>进行渲染时，透传 Attribute 会自动添加到根元素上，如果根元素上已有同名的 class 和 style，则会将二者合并。透传 Attribute 可以穿刺，即如果根元素仍然是一个组件，那么透传 Attribute 会继续传递下去。</p><p>如果想要禁止组件自动继承透传 Attribute，在<code>&lt;script setup&gt;</code>中可以使用<code>defineOptions</code>宏的<code>inheritAttrs</code>属性进行设置，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>禁用 Attribute 自动继承的一大应用场景就是需要将透传 Attribute 应用在<strong>非根节点</strong>上。在设置<code>inheritAttrs: false</code>后，可以在<code>$attrs</code>对象访问到透传 Attribute。(注意，不禁用自动继承也是可以访问到<code>$attrs</code>的)</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Parent.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>console.log(&#39;parent&#39;)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Child.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 这里使用了没有参数的v-bind继承所有的透传Attribute --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>console.log(&#39;child&#39;)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$attrs<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>多根的组件则没有自动 Attribute 透传的行为，需要显式绑定<code>$attrs</code>，否则会抛出一个运行时警告。</p><p>如果需要在<code>&lt;script setup&gt;</code>中访问透传 Attribute，可以使用<code>useAttrs()</code>API 进行访问，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useAttrs<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> atts <span class="token operator">=</span> <span class="token function">useAttrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attrs<span class="token punctuation">.</span>onClick<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="插槽-slots" tabindex="-1"><a class="header-anchor" href="#插槽-slots"><span>插槽 slots</span></a></h2><p>通过使用插槽，父组件可以向子组件传递<strong>模板片段</strong>，让子组件渲染这些模板片段。使用插槽需要父组件提供<strong>插槽内容</strong>（可以是任意合法的模板内容），子组件提供<strong>插槽出口</strong>。插槽内容可以访问到父组件的数据作用域，无法访问子组件的数据作用域。</p><p>当父组件未提供插槽内容时，可以插槽出口设置插槽的默认内容，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>default slot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>如果一个组件需要使用多个插槽，可以通过<strong>具名插槽</strong>实现，具名插槽是指为<code>&lt;slot&gt;</code>增加一个特殊的<code>name</code>属性，以区别多个插槽，没有提供<code>name</code>的<code>&lt;slot&gt;</code>会将<code>name</code>默认设置为<code>default</code>，子组件中的每一个<code>name</code>需要与父组件中<code>&lt;template&gt;</code>的<code>v-slot</code>指令的指令参数一一对应，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Parent.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- v-slot:named可以简写为#named --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#named</span><span class="token punctuation">&gt;</span></span> named slot <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 所有的非template节点都会被隐式地视为默认插槽的内容 --&gt;</span>
    default slot
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>named<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>v-slot</code>的指令参数也可以是动态的，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;slotName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[name]</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>如果需要使得插槽内容可以访问到子组件的数据作用域，可以使用<strong>作用域插槽</strong>，作用域插槽需要<code>v-slot</code>接收一个指令值，这个指令值是一个对象，通过这个对象可以获取到插槽出口绑定的属性，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- Parent.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 也可以直接解构出a，v-slot=&quot;{ a }&quot; --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slot<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ slot.a }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>注意，如果同时使用具名插槽、默认插槽和作用域插槽，应当显式地为默认插槽添加<code>&lt;template #slot:defalut=&#39;slot&#39;&gt;</code>。</p><h2 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h2><p>假设我们有一个组件 Component1，Component1 有一个子组件 Component2，Component2 又有一个子组件 Component3，通常情况下，我们会使用 props 向子组件传递数据，但是，当我们需要将 Component1 的数据传递给 Component3，且 Component2 并不需要使用到这些数据时，就会导致组件链路过长，出现<strong>prop 逐级透传</strong>的问题，通过<code>provide</code>（提供）和<code>inject</code>（注入）可以解决这个问题，一个父组件相对于其所有后代组件是<strong>依赖提供者</strong>，所有的后代都可以<strong>注入</strong>由父组件提供给整条链路的依赖。</p><p>要为后代组件提供数据，可以使用<code>provide()</code>API，<code>provide()</code>接收两个参数，第一个参数是注入名，注入名可以是一个字符串或一个符号（为了避免命名冲突推荐使用符号作为注入名），第二个参数是注入值，后代组件通过注入名来查找注入值。此外还可以创建应用层的<code>provide</code>，通过 Vue 应用实例调用<code>provide()</code>即可实现。</p><p>要使用上层组件提供的数据，可以使用<code>inject()</code>API， <code>inject()</code>接收注入名为参数，返回该注入名对应的注入值，<code>inject()</code>的第二个参数可以设置默认值，当上层组件没有提供该注入名时生效。当默认值需要由一个工厂函数生成时，需要将第三个参数设置为 true 表示将第二个参数视为一个工厂函数。</p><p>最佳实践：任何对响应式状态的修改都应在供给方组件中进行，因此我们可以通过在父组件定义一个用于修改响应式状态的函数，并向后代组件同时提供响应式状态和对应的修改函数。</p><p>如果要确保提供的数据不被后代组件修改，可以使用<code>readonly()</code>对注入值进行包装。</p><h2 id="组合式函数" tabindex="-1"><a class="header-anchor" href="#组合式函数"><span>组合式函数</span></a></h2><p>组合式函数是一个利用 Vue 组合式 API 来封装和复用有状态逻辑的函数。如下为组合式函数的例子：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// mouse.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 组合式函数，最佳实践：以use开头命名组合式函数</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>
    y<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousemove&quot;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousemove&quot;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// fetch.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> toValue<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    error<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// toValue: 1. 参数是ref，获取其value 2. 参数是函数，执行该函数并获取返回值 3. 其他参数直接返回原参数</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token function">toValue</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">.</span>value <span class="token operator">=</span> json<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        error<span class="token punctuation">.</span>value <span class="token operator">=</span> err<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令"><span>自定义指令</span></a></h2><p>自定义指令主要是为了重用涉及普通元素的底层 DOM 访问的逻辑，一个自定义指令由一个包含类似组件生命周期钩子的对象来定义，在<code>&lt;script setup&gt;</code>中，以 v 开头且使用驼峰命名法的变量都可以被当作一个自定义指令，没有<code>&lt;script setup&gt;</code>则需要通过<code>directives</code>选项进行注册（此处则无需 v），如下所示：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vDirective <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在绑定元素的属性前 或 事件监听器应用前调用</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 在元素被插入到 DOM 前调用</span>
  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 在绑定元素的父组件及他自己的所有子节点都挂载完成后调用</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 绑定元素的父组件更新前调用</span>
  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 在绑定元素的父组件及他自己的所有子节点都更新后调用</span>
  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 绑定元素的父组件卸载前调用</span>
  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 绑定元素的父组件卸载后调用</span>
  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// el表示指令绑定的元素，除了el其他都是只读的</span>
  <span class="token comment">// binding是一个对象，包括value（指令值）、oldValue（仅在update钩子中可访问）、arg（指令参数）、modifiers（指令修饰符）、instance、dir</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>当我们仅需要在<code>mounted</code>和<code>updated</code>这两个钩子执行相同的行为时，可以使用简写模式：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">vDirective</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>不推荐在组件上使用自定义指令，自定义指令也可以像组件一样全局组册，使用 Vue 应用实例的<code>.directive()</code>方法注册。</p><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h2><p>一个插件可以是一个拥有<code>install()</code>方法的对象，也可以是一个安装函数本身。安装函数会接收到安装它的 Vue 应用实例和传递给<code>app.use()</code>的额外选项作为参数，如下所示：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// plugins/plugin.js</span>
<span class="token keyword">const</span> myPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过app.component或者app.directive注册全局组件或者全局指令</span>
    <span class="token comment">// 通过app.provide使一个资源可被注入进整个应用</span>
    <span class="token comment">// 向app.config.globalProperties中添加全局属性或方法</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>使用插件则使用<code>app.use()</code>方法，该方法接收两个参数，参数一是插件名，参数二是 options。</p><h2 id="transition-和-transitiongroup" tabindex="-1"><a class="header-anchor" href="#transition-和-transitiongroup"><span>Transition 和 TransitionGroup</span></a></h2><p>Transition 和 TransitionGroup 是 Vue 提供的用于制作基于状态变化的过渡和动画的内置组件。</p><p><code>&lt;Transition&gt;</code>可以将进入或离开动画应用到通过默认插槽传递给它的元素（单个元素）或组件（单根组件）上，通过与原生 CSS 过渡或动画一起使用，进入或离开可以由以下条件触发：</p><ol><li>v-if 的切换</li><li>v-show 的切换</li><li>动态组件<code>&lt;component&gt;</code>的切换</li><li>key 属性的改变 当<code>&lt;Transition&gt;</code>中的元素被插入或移除时，会发生以下事件：</li><li>检测元素是否应用了过渡或动画，应用了则会在合适的时机添加或删除</li><li>检测是否存在作为监听器的钩子，有则在合适的时机调用</li><li>如果 1 和 2 都不存在，则 DOM 的插入或删除操作将会在浏览器的下一个动画帧后执行</li></ol><p>Vue 提供了六个应用于进入与离开过渡效果的 class，过渡 class 仅能用在<code>&lt;Transition&gt;</code>的直接子元素上，如下图所示： <img src="`+r+`" alt="六个应用于进入与离开过渡效果的class"><code>&lt;Transition&gt;</code>可以添加一个<code>name</code>属性，相应的 class 的前缀也会从 v-变成对应的 name 值。</p><p>使用方法如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isShow <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fade<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 这里通过默认插槽传递元素或组件 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow = !isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>toggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.fade-enter-active</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s linear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.fade-leave-active</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s linear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.fade-enter-from,
.fade-leave-to</span> <span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>20px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>除了通过声明<code>name</code>属性可以修改默认的 class 名外，还可以通过<code>enter-from-class</code>、<code>enter-to-class</code>、<code>enter-active-class</code>、<code>leave-from-class</code>、<code>leave-to-class</code>、<code>leave-active-class</code>这六个属性直接修改整个 class 名。</p><p>如果在同一个元素上同时使用了过渡和动画，应为该<code>&lt;Transition&gt;</code>显式地声明<code>type</code>属性，取值可以是<code>animation</code>或者<code>transition</code>，以告诉 Vue 你更关心哪种类型。</p><p>默认情况下，<code>&lt;Transition&gt;</code> 组件会通过监听过渡根元素上的第一个 transitionend 或者 animationend 事件来尝试自动判断过渡何时结束。而在嵌套的过渡中，期望的行为应该是等待所有内部元素的过渡完成。在这种情况下，你可以通过向<code>&lt;Transition&gt;</code> 组件传入 <code>duration</code>属性来显式指定过渡的持续时间 (以毫秒为单位)，总持续时间应该匹配延迟加上内部元素的过渡持续时间。除了直接传入一个时间数值外，还可以传入一个对象，分别指定 enter 和 leave 的持续时间。</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ enter: 500, leave: 800 }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>&lt;Transition&gt;</code>组件还提供了 8 个钩子用于访问过渡过程的不同时期，使用仅由 Javascript 执行的动画时，最好添加一个<code>:css:&quot;false&quot;</code>，这样我们可以通过使用<code>done</code>函数全权负责控制过渡什么时候结束，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 这些钩子的回调函数统一接收一个参数el，enter和leave还会接收第二个参数done --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span>
  <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeEnter<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enter<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@after-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>afterEnter<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@enter-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enterCancelled<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@before-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeLeave<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>leave<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>afterLeave<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@leave-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>leaveCancelled<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:css</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>可以通过为<code>&lt;Transition&gt;</code>组件显式地添加一个<code>appear</code>属性，使得节点在初次渲染时就应用一个过渡效果。</p><p>通常情况下，进入和离开的元素都是同时进行动画的，但很多情况下我们需要在离开的元素执行完动画后再开始执行进入元素的动画，这时我们可以为<code>&lt;Transition&gt;</code>组件显式地添加一个<code>mode=&quot;out-in&quot;</code>属性，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isHello <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 如果不加mode的话，会出现button被短暂地向下撑的情况 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ani<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>out-in<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isHello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isHello = !isHello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.ani-enter-active,
.ani-leave-active</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s linear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.ani-enter-from,
.ani-leave-to</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>20px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>可以通过为插槽的内容增加一个<code>key</code>强制重新渲染 DOM 元素，从而达到触发过渡的效果，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ani<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>out-in<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- count变化时，只有文本节点需要重新渲染，而元素节点p是不需要重新渲染的，而&lt;Transition&gt;组件的过渡动画只有在其直接子元素重新渲染时才会被触发，通过增加key可以强制p也同步进行重新渲染 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.ani-enter-active,
.ani-leave-active</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s linear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.ani-enter-from,
.ani-leave-to</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>20px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>&lt;TransitionGroup&gt;</code>也是一个内置组件，用于对<strong>v-for 列表</strong>中的元素或组件的插入、移除和顺序改变增加动画效果。</p><p><code>&lt;TransitionGroup&gt;</code>和<code>&lt;Transition&gt;</code>的区别如下：</p><ol><li><code>&lt;TransitionGroup&gt;</code>可以通过<code>tag</code>属性指定一个容器元素进行渲染，如下所示：</li></ol><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lee&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;goh&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  items<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> items<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;new&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 渲染时外部会增加一个ul元素，注意不要直接添加一个ul元素，因为TransitionGroup的直接子元素应当是一个v-for列表 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TransitionGroup</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ul<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TransitionGroup</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.v-enter-active,
.v-leave-active</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s linear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.v-enter-from,
.v-leave-to</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>20px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ol><li>过渡模式（mode）在<code>&lt;TransitionGroup&gt;</code>中不可用，因为<code>&lt;TransitionGroup&gt;</code>不是在互斥的元素中切换。</li><li>列表中每个元素都必须有一个 key，过渡 class 是应用在列表元素上而不是容器元素上。</li></ol><h2 id="动态组件" tabindex="-1"><a class="header-anchor" href="#动态组件"><span>动态组件</span></a></h2><p><code>&lt;component&gt;</code>元素配合<code>is</code>属性可以实现不同组件之间的切换。<code>is</code>的值可以导入的组件对象、被注册的组件名以及普通的 HTML 元素，被切换的组件会被卸载。</p><p>某些 HTML 元素对于其子元素类型有限制，如<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code>和<code>&lt;select&gt;</code>，当你需要在这些元素中放置组件时，不可以像如下的书写方式：</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 错误的 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>而应当配合<code>is</code>属性和<code>vue:</code>前缀使用，如下所示：</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vue:my-component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="keepalive" tabindex="-1"><a class="header-anchor" href="#keepalive"><span>KeepAlive</span></a></h2><p>动态组件在切换时，不需要的组件会自动被卸载，相应的状态也会被消除，可以通过 Vue 的<code>&lt;KeepAlive&gt;</code>内置组件保留被切换的组件实例，<code>&lt;KeepAlive&gt;</code>默认会缓存（组件在不活跃和激活两种状态间切换，始终作为组件树的一部分不会被卸载）内部所有的组件实例，可以通过<code>include</code>和<code>exclude</code>来定制这一行为，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 以英文逗号分隔的字符串 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a,b<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 正则表达式 (需使用 \`v-bind\`) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/a|b/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 数组 (需使用 \`v-bind\`) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;a&#39;, &#39;b&#39;]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>可以通过<code>max</code>属性设置<code>&lt;KeepAlive&gt;</code>组件的最大缓存实例数，当缓存的实例数量超过最大缓存实例数时，那么最久没被访问的组件实例会被销毁。</p><p><code>onActivated()</code>会在组件从不活跃状态切换到激活状态时被调用（组件挂载时也会调用），<code>onDeactivated()</code>会在组件从激活状态切换到不活跃状态时被调用（组件卸载时也会调用），这两个钩子也可以在<code>&lt;KeepAlive&gt;</code>组件的后代组件中被调用。</p><h2 id="teleport" tabindex="-1"><a class="header-anchor" href="#teleport"><span>Teleport</span></a></h2><p><code>&lt;Teleport&gt;</code>是一个内置组件，它可以将组件的一部分模板传送到该组件的 DOM 结构外层去。当一个组件模板在逻辑上从属于该组件，但从整个应用来看这个模板应该被渲染在 Vue 应用外部的其他地方时，就可以使用<code>&lt;Teleport&gt;</code>组件，常见的使用场景有全屏的模态框，如下所示：</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isShow <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 可以通过控制台观察到modal被渲染到body下 --&gt;</span>
    <span class="token comment">&lt;!-- to属性指定传送的目标，取值可以是一个CSS选择器字符串，也可以是一个DOM元素对象 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>body<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modal<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>modal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow = !isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>close modal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Teleport</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow = !isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>show modal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.modal</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 999<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>在进行响应式设计时，不同设备对设计的要求可能不同，一个组件在 PC 端使用<code>&lt;TelePort&gt;</code>渲染为浮层，而在移动端则直接被渲染成行内组件，此时我们需要使用<code>disabled</code>属性根据条件禁用<code>&lt;TelePort&gt;</code>。</p><p>多个<code>&lt;TelePort&gt;</code>可以被挂载到同一个目标元素上，按照顺序依次追加。</p><h2 id="单文件组件-sfc" tabindex="-1"><a class="header-anchor" href="#单文件组件-sfc"><span>单文件组件（SFC）</span></a></h2><p>Vue 的单文件组件是一种以.vue 为文件后缀名的特殊文件，通过使用<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>三个块将组件的模板、逻辑和样式封装在一个文件中。使用单文件组件<strong>必须使用构建工具</strong>，使用单文件组件的优点如下：</p><ol><li>可以使用熟悉的 HTML、CSS、JavaScript 语法编写模块化的组件。</li><li>预编译模板，避免运行时的编译开销。</li><li>通过<code>&lt;style scoped&gt;</code>可以实现 CSS 的组件作用域。</li><li>通过<code>&lt;script setup&gt;</code>可以更便捷地使用组合式 API。</li><li>通过使用<code>Vue-Official</code>插件可以获得更好的 IDE 支持。</li><li>模块热更新支持。</li></ol><h2 id="v-once-和-v-memo" tabindex="-1"><a class="header-anchor" href="#v-once-和-v-memo"><span>v-once 和 v-memo</span></a></h2><p>拥有<code>v-once</code>指令的元素和组件（包括其所有子项）只会被渲染一次，之后会被当作静态内容并跳过所有更新。</p><p><code>v-memo</code>指令用于缓存一个模板的子树，该指令可用于元素和组件上。<code>v-memo</code>接受一个类型为<strong>依赖值数组</strong>的指令值，当依赖值数组中的每一个值与最后一次渲染的值都保持一致时，整个子树的更新都会被跳过。<code>v-once</code>是特殊的<code>v-memo</code>，其等价于<code>v-memo=&quot;[]&quot;</code>。通常情况下，我们会在使用<code>v-for</code>的时候使用<code>v-memo</code>进行性能优化(仅在<code>v-for</code>列表长度超过 1000 的情况下)，需要注意的是，<code>v-memo</code>必须和<code>v-for</code>应用在同个元素上。</p><div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-memo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[item.id === selected]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>ID: {{ item.id }} - selected: {{ item.id === selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="v-text、v-html、v-pre" tabindex="-1"><a class="header-anchor" href="#v-text、v-html、v-pre"><span>v-text、v-html、v-pre</span></a></h2><p><code>v-text</code>指令用于设置元素的<code>textContent</code>属性，<code>v-html</code>指令用于设置元素的<code>innerHTML</code>属性。需要注意的是，<code>&lt;style scoped&gt;</code>中的样式不会作用于<code>v-html</code>中的元素，因为 HTML 内容不会被 Vue 的模板编译器解析。此外，应尽量避免使用<code>v-html</code>，动态渲染 HTML 是十分危险的，很容易遭受 XSS 攻击。<code>v-pre</code>指令用于跳过元素及其子元素的编译，常用于显示原始双大括号及其内容（避免被 Vue 的模板编译器编译）。</p><h2 id="vue-的渲染系统" tabindex="-1"><a class="header-anchor" href="#vue-的渲染系统"><span>Vue 的渲染系统</span></a></h2><p>Vue 的渲染系统是基于<strong>虚拟 DOM</strong>构建的。虚拟 DOM 是指将所需的 UI 用数据结构的形式虚拟地表现出来，保存在内存中，然后令真实的 DOM 与之保持一致。一个运行时渲染器会遍历整棵虚拟树，并据此构建出真实的 DOM 树，这个过程被称为挂载。渲染器会遍历两棵不同的虚拟树，找出它们之间的区别，并将这些变化应用到真实的 DOM 上，这个过程被称为更新。</p>`,152);function x(j,V){const o=e("ExternalLinkIcon"),s=e("VuePlayground");return l(),u("div",null,[g,n("p",null,[n("a",v,[p("本条参考 1"),a(o)])]),n("p",null,[n("a",m,[p("本条参考 2"),a(o)])]),f,a(s,{title:"class%20%E7%9A%84%E7%89%B9%E6%AE%8A%E5%A2%9E%E5%BC%BA",key:"09c4bdcc",settings:"%7B%7D",files:"eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8IS0tIGVycm9yQ2xhc3PkvJrkuIDnm7TlrZjlnKjvvIzogIxhY3RpdmXliJnpnIDopoHpgJrov4dpc0FjdGl2ZeeahOWAvOi%2Fm%2BihjOWIpOaWrSAtLT5cbiAgPGRpdiA6Y2xhc3M9XCJbeyBhY3RpdmU6IGlzQWN0aXZlIH0sIGVycm9yQ2xhc3NdXCI%2BY2xhc3PnmoTnibnmrorlop7lvLo8L2Rpdj5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJpc0FjdGl2ZSA9ICFpc0FjdGl2ZVwiPuS%2FruaUuWlzQWN0aXZlPC9idXR0b24%2BXG48L3RlbXBsYXRlPlxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcbmNvbnN0IGlzQWN0aXZlID0gcmVmKHRydWUpO1xuY29uc3QgZXJyb3JDbGFzcyA9IHJlZihcImVycm9yXCIpO1xuPC9zY3JpcHQ%2BXG48c3R5bGU%2BXG5kaXYge1xuICB3aWR0aDogMjAwcHg7XG4gIGhlaWdodDogMjAwcHg7XG59XG4uYWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XG59XG4uZXJyb3Ige1xuICBjb2xvcjogcmVkO1xufVxuPC9zdHlsZT5cbjwhLS0g5Lul5LiK5pyA57uI5Lya6KKr5riy5p%2BT5Li6IDxkaXYgY2xhc3M9XCJhY3RpdmUgZXJyb3JcIj48L2Rpdj4gLS0%2BXG4ifQ%3D%3D"}),h,a(s,{title:"%E6%96%B9%E6%B3%95%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8",key:"26a695b6",settings:"%7B%7D",files:"eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmZ1bmN0aW9uIGNsaWNrKGV2ZW50KSB7XG4gIGFsZXJ0KGV2ZW50LnRhcmdldC5pbm5lclRleHQpOyAvLyBjbGljayFcbn1cbjwvc2NyaXB0PlxuPHRlbXBsYXRlPlxuICA8YnV0dG9uIEBjbGljaz1cImNsaWNrXCI%2BY2xpY2shPC9idXR0b24%2BXG48L3RlbXBsYXRlPlxuIn0%3D"}),y,a(s,{title:"%E5%86%85%E8%81%94%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8",key:"6641e8f8",settings:"%7B%7D",files:"eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmZ1bmN0aW9uIGNsaWNrKG1zZywgZXZlbnQpIHtcbiAgYWxlcnQobXNnLCBldmVudCk7XG59XG48L3NjcmlwdD5cbjx0ZW1wbGF0ZT5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJjbGljaygnaGVsbG8gd29ybGQnLCAkZXZlbnQpXCI%2BY2xpY2shPC9idXR0b24%2BXG48L3RlbXBsYXRlPlxuIn0%3D"}),q,b,a(s,{title:"v-model",key:"4275fb4a",settings:"%7B%7D",files:"eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcbmxldCB0ZXh0ID0gcmVmKCk7XG48L3NjcmlwdD5cbjx0ZW1wbGF0ZT5cbiAgPGlucHV0IHYtbW9kZWw9XCJ0ZXh0XCIgLz5cbiAgPHA%2Be3sgdGV4dCB9fTwvcD5cbiAgPCEtLSDnrYnku7fkuo4gLS0%2BXG4gIDwhLS0gPGlucHV0IDp2YWx1ZT1cInRleHRcIiBAaW5wdXQ9XCIoZXZlbnQpID0%2BICh0ZXh0ID0gZXZlbnQudGFyZ2V0LnZhbHVlKVwiIC8%2BIC0tPlxuPC90ZW1wbGF0ZT5cbiJ9"}),w])}const C=c(d,[["render",x],["__file","vue.html.vue"]]),I=JSON.parse('{"path":"/learn/vue.html","title":"Vue","lang":"zh-CN","frontmatter":{},"headers":[{"level":1,"title":"Vue","slug":"vue","link":"#vue","children":[{"level":2,"title":"创建一个 Vue 项目","slug":"创建一个-vue-项目","link":"#创建一个-vue-项目","children":[]},{"level":2,"title":"Vue 的核心功能","slug":"vue-的核心功能","link":"#vue-的核心功能","children":[]},{"level":2,"title":"单文件组件","slug":"单文件组件","link":"#单文件组件","children":[]},{"level":2,"title":"Vue 的 API 风格","slug":"vue-的-api-风格","link":"#vue-的-api-风格","children":[]},{"level":2,"title":"使用 Vue 的方法","slug":"使用-vue-的方法","link":"#使用-vue-的方法","children":[]},{"level":2,"title":"模板语法","slug":"模板语法","link":"#模板语法","children":[]},{"level":2,"title":"响应式","slug":"响应式","link":"#响应式","children":[]},{"level":2,"title":"计算属性","slug":"计算属性","link":"#计算属性","children":[]},{"level":2,"title":"class 和 style 属性的 v-bind 用法的特殊增强","slug":"class-和-style-属性的-v-bind-用法的特殊增强","link":"#class-和-style-属性的-v-bind-用法的特殊增强","children":[]},{"level":2,"title":"v-if 和 v-show 的区别","slug":"v-if-和-v-show-的区别","link":"#v-if-和-v-show-的区别","children":[]},{"level":2,"title":"v-if 和 v-for","slug":"v-if-和-v-for","link":"#v-if-和-v-for","children":[]},{"level":2,"title":"v-for 的注意事项","slug":"v-for-的注意事项","link":"#v-for-的注意事项","children":[]},{"level":2,"title":"v-for 中的 key","slug":"v-for-中的-key","link":"#v-for-中的-key","children":[]},{"level":2,"title":"事件处理的注意事项","slug":"事件处理的注意事项","link":"#事件处理的注意事项","children":[]},{"level":2,"title":"v-model","slug":"v-model","link":"#v-model","children":[]},{"level":2,"title":"生命周期钩子","slug":"生命周期钩子","link":"#生命周期钩子","children":[]},{"level":2,"title":"侦听器","slug":"侦听器","link":"#侦听器","children":[]},{"level":2,"title":"模板引用","slug":"模板引用","link":"#模板引用","children":[]},{"level":2,"title":"组件注册","slug":"组件注册","link":"#组件注册","children":[]},{"level":2,"title":"props","slug":"props","link":"#props","children":[]},{"level":2,"title":"组件事件","slug":"组件事件","link":"#组件事件","children":[]},{"level":2,"title":"v-model 在组件上的使用","slug":"v-model-在组件上的使用","link":"#v-model-在组件上的使用","children":[]},{"level":2,"title":"透传 Attribute","slug":"透传-attribute","link":"#透传-attribute","children":[]},{"level":2,"title":"插槽 slots","slug":"插槽-slots","link":"#插槽-slots","children":[]},{"level":2,"title":"依赖注入","slug":"依赖注入","link":"#依赖注入","children":[]},{"level":2,"title":"组合式函数","slug":"组合式函数","link":"#组合式函数","children":[]},{"level":2,"title":"自定义指令","slug":"自定义指令","link":"#自定义指令","children":[]},{"level":2,"title":"插件","slug":"插件","link":"#插件","children":[]},{"level":2,"title":"Transition 和 TransitionGroup","slug":"transition-和-transitiongroup","link":"#transition-和-transitiongroup","children":[]},{"level":2,"title":"动态组件","slug":"动态组件","link":"#动态组件","children":[]},{"level":2,"title":"KeepAlive","slug":"keepalive","link":"#keepalive","children":[]},{"level":2,"title":"Teleport","slug":"teleport","link":"#teleport","children":[]},{"level":2,"title":"单文件组件（SFC）","slug":"单文件组件-sfc","link":"#单文件组件-sfc","children":[]},{"level":2,"title":"v-once 和 v-memo","slug":"v-once-和-v-memo","link":"#v-once-和-v-memo","children":[]},{"level":2,"title":"v-text、v-html、v-pre","slug":"v-text、v-html、v-pre","link":"#v-text、v-html、v-pre","children":[]},{"level":2,"title":"Vue 的渲染系统","slug":"vue-的渲染系统","link":"#vue-的渲染系统","children":[]}]}],"git":{},"filePathRelative":"learn/vue.md"}');export{C as comp,I as data};

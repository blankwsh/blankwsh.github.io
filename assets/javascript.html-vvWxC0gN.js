import{_ as o,r as e,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-DHHNIcXM.js";const u="/assets/Mark_Compact-D7K9QCwQ.png",i="/assets/OldNew-C_Vvlwnk.png",k="/assets/OldNew2-Be-R8Dzn.png",r="/assets/parallel-jOIkYmnD.png",d="/assets/zengliangbiaoji-CQHz8lFg.png",g="/assets/threeColor-BbrFdhuw.png",m="/assets/Write-barrier-BFOlSkcq.png",h="/assets/concurrent-6bMt9iHQ.png",f="/assets/youliDOM-B4ZoKi9z.png",y="/assets/windowOrNot-C9MAQAL6.png",b={},q=p(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>Javascript</span></a></h1><h2 id="javascipt-的数据类型" tabindex="-1"><a class="header-anchor" href="#javascipt-的数据类型"><span>Javascipt 的数据类型</span></a></h2><p>Javascript 的数据类型分为基本数据类型和引用数据类型。其中基本数据类型分为七种，分别是数值 Number、字符串 String、布尔值 Boolean、Undefined、Null、ES6 新增的 Symbol 以及 ES11 新增的 BigInt；引用数据类型则多种多样，常见的引用数据类型有 Object、Function、Array、Date、Math、Map、Set、Promise、Class 等。</p><p>基本数据类型和引用数据类型的区别有以下几点：</p><p>1.<strong>基本数据类型是不可变的</strong>，当为一个被赋值了基本数据类型的变量重新赋值新的基本数据类型时，实际上是开辟了新的空间存储新的值，而不是修改原先的值，而<strong>引用数据类型是可变的</strong>，当修改一个对象的某个属性时，该属性对应的存储空间的值也会相应改变，并不开辟新的存储空间。</p><p>2.<strong>基本数据类型存储在栈内存中</strong>，而<strong>引用数据类型存储在堆内存中</strong>，<strong>变量存储实际上是对堆内存中数据的引用</strong>，因此，基本数据类型比较是按值比较，而引用数据类型是按引用比较。</p><p>3.引用数据类型可以包含基本数据类型和引用数据类型的值，而基本数据类型则只能包含一个值。</p><p>4.基本数据类型在传递给函数时是按值传递，而引用数据类型则是按引用传递。</p><h2 id="数据类型检测办法" tabindex="-1"><a class="header-anchor" href="#数据类型检测办法"><span>数据类型检测办法</span></a></h2><h3 id="使用-typeof-运算符" tabindex="-1"><a class="header-anchor" href="#使用-typeof-运算符"><span>使用 typeof 运算符</span></a></h3><p>使用 typeof 运算符可以准确检测出<strong>除了 null 以外</strong>的其他六种基本数据类型，此外还可以检测出引用数据类型中的<strong>function</strong>，但在检测 null 或者其他的引用数据类型时均只会返回<code>object</code>。</p><h3 id="使用-instanceof-运算符" tabindex="-1"><a class="header-anchor" href="#使用-instanceof-运算符"><span>使用 instanceof 运算符</span></a></h3><p>使用 instanceof 运算符的返回值是布尔值，可以用它来判断<strong>所有的引用数据类型</strong>，但当用 instaceof 只能检测出使用<strong>new 运算符</strong>构造的基本数据类型(常指 Number、String、Boolean)，直接检测基本数据类型将会返回 false。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fasle</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><p>instanceof 运算符的本质是根据原型链进行查找。手写一个简单的 instanceof 方法如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// instanceof检测基本数据类型会直接返回false</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取a的原型对象，判断是否为b</span>
  <span class="token keyword">let</span> prototypeOfA <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 顺着原型链查找，直至原型链终点</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prototypeOfA <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prototypeOfA <span class="token operator">===</span> b<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    prototypeOfA <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>prototypeOfA<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="使用-object-prototype-tostring-call" tabindex="-1"><a class="header-anchor" href="#使用-object-prototype-tostring-call"><span>使用 Object.prototype.toString.call()</span></a></h3><p>使用该方法可以判断所有的数据类型，返回值是一个字符串，如下所示：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Number]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">12n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object BigInt]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Null]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Function]</span>
</code></pre></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h2><p>先看一道输出题：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">+</span> <span class="token operator">+</span><span class="token string">&quot;a&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// banana</span>
</code></pre></div><p>这道题的输出应该是&quot;banana&quot;，中间的两个+分别表示二元运算符加以及一元运算符正。由于无法对字符串使用一元运算符正，所以<code>+ &#39;a&#39;</code>会输出 NaN，NaN 遇到前面连接形成的字符串&#39;ba&#39;会发生隐式类型转换，连接生成字符串&#39;baNaN&#39;，最后生成&#39;banana&#39;。这是一道 Javascript 经典的类型转换题，体现了 Javascript 动态弱类型的特点。</p><p>再看另一道题：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,NaN,NaN]</span>
</code></pre></div><p>理想的输出应该是通过 parseInt 将三个字符均显式类型转换为数值，但是这里容易忽视的点是：parseInt 函数在使用可以传入两个参数，第一个是待转换的值，第二个是转换的基数（即进制，取值范围是 2-36，也可以是 0），同时，map 函数在传递参数时会传递三个参数，分别是元素、索引和源数组，这就导致 map 函数传递给 parseInt 函数的第二个参数索引被识别为转换的基数，具体解析方式如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// parseInt(string, radix) -&gt; map(parseInt(value, index))</span>
<span class="token comment">/* 第一次迭代 (index 是 0): */</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token comment">/* 第二次迭代 (index 是 1)，parseInt第二个参数取值外，不符合所以输出NaN: */</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token comment">/* 第三次迭代 (index 是 2)，将3作为二进制数看并转换为十进制数，但显然3不可能是二进制数，所以输出NaN: */</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre></div><p>解决办法也很简单，不要偷懒就好了，如下修改即可：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]</span>
</code></pre></div><p>回归正题，Javascript 类型转换分为隐式类型转换和显式类型转换，以下会介绍一些类型转换的常见情况和方法。</p><h3 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换"><span>隐式类型转换</span></a></h3><p>隐式类型转换通常发生在使用<strong>比较运算</strong>和<strong>算术运算</strong>的时候，当运算符两边的值类型不一致时，常常会自动进行隐式类型转换。</p><h4 id="自动转换为布尔值" tabindex="-1"><a class="header-anchor" href="#自动转换为布尔值"><span>自动转换为布尔值</span></a></h4><p>当我们需要布尔值，但提供的值为<strong>undefined、null、false、+0、-0、0n、NaN、&quot;&quot;</strong>（我们称这些值为<strong>假值</strong>），这些值会隐式转换为 false，其他的值都会隐式转换为 true。</p><h4 id="自动转换为字符串" tabindex="-1"><a class="header-anchor" href="#自动转换为字符串"><span>自动转换为字符串</span></a></h4><p>当<strong>加号运算符两边的值类型不一致且其中之一为字符串类型</strong>时，就会出现自动转换为字符串的情况。</p><p>对于上述的情况，首先会分别执行两个值的<strong>toPrimitive</strong>方法，判断两边的值是否均为基本数据类型，是则进行字符串拼接（特别注意 bigInt 的后缀 n 会被忽略），不是则调用该值的<strong>valueOf</strong>方法，判断 valueOf 方法的结果是否为基本数据类型，是则进行字符串拼接，不是则继续调用该值的<strong>toString</strong>方法，最后将两边的值进行字符串拼接。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1null&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined1&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object Object]2&quot;,对象的toString方法返回[object Object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1&quot;,[]的toString方法返回&quot;&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;truenull&quot;</span>
</code></pre></div><h4 id="自动转换为数值" tabindex="-1"><a class="header-anchor" href="#自动转换为数值"><span>自动转换为数值</span></a></h4><p>与自动转换为字符串不同，<strong>除了加号运算符</strong>以外的运算符在遇到不合法的数据类型时都会尝试将他们转换为数值类型。特别的，null 会转换为 0，undefined 会转换为 NaN，对象会转换为 NaN，[]转换为 0，长度为 1 的数组转换为索引为 0 的值，其他的数组转换为 NaN，不是纯数字构成的字符串（去除首尾空格）也会转换成 NaN，此外，Symbol 和 BigInt 在运算时都会抛出 TypeError 错误。(NaN 是一种特殊的数值，可以通过 typeof 运算符检验)</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span> <span class="token operator">-</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">*</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span> <span class="token operator">/</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;9&quot;</span> <span class="token operator">%</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span> <span class="token operator">**</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span> <span class="token operator">-</span> <span class="token string">&quot; 12 &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">-</span> <span class="token string">&quot; 1    2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre></div><h3 id="显式类型转换" tabindex="-1"><a class="header-anchor" href="#显式类型转换"><span>显式类型转换</span></a></h3><h4 id="数值的显式类型转换" tabindex="-1"><a class="header-anchor" href="#数值的显式类型转换"><span>数值的显式类型转换</span></a></h4><ol><li>使用 <strong>Number()</strong> 函数进行显式转换，转换规则与数值的隐式类型转换规则一致。</li><li>使用 <strong>parseInt()</strong> 函数进行显式转换，与 Number 函数不同，parseInt 函数将其<strong>第一个参数转换为一个字符串</strong>，对该字符串进行解析，然后返回一个整数或 NaN。因此，使用 parseInt 转换 null、true、[]、{}、&quot;&quot;、&quot; &quot;等都会直接返回 NaN。如果传入的参数是一个字符串，parseInt 首先会去除首尾空格，然后将依次读取字符串中的每一位直至读取到非数字字符，将非数字字符以前的数字作为转换结果（可以识别第一个负号）。如果传入的参数是浮点数，转换结果会是浮点数对应的符号加上其整数部分，使用效果与<code>Math.round()</code>一致。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;   1   2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;a1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre></div><ol><li>使用 <strong>一元运算符正+</strong> 进行转换，转换结果与使用 Number 函数一致。</li><li>使用 <strong>二元运算符减号</strong> 进行转换，减号运算符的右边必须是数值 0，转换结果与使用 Number 函数一致。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre></div><h4 id="字符串的显式类型转换" tabindex="-1"><a class="header-anchor" href="#字符串的显式类型转换"><span>字符串的显式类型转换</span></a></h4><ol><li>使用 <strong>String()</strong> 函数进行显式转换，转换规则与字符串的隐式类型转换规则一致。</li><li>使用 <strong>toString()</strong> 方法进行显式转换，toString 方法的转换规则与 String 函数基本一致，不同的是，toString 方法不能转换 null 和 undefined，会抛出 TypeError 错误。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;null&#39;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>
</code></pre></div><ol start="3"><li>使用 <strong>二元运算符加号</strong> 进行转换，转换结果与使用 String 函数一致，特别注意的是，加号运算符的左边必须是&#39;&#39;，两边不能交换位置，否则在显式转换对象时会发生错误。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Object]&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0(不正确的输出结果)</span>
</code></pre></div><p>上述第二条可能会给你带来困惑，在这个表达式中，{} 被解释为一个空的代码块，而不是一个对象字面量。因此，JavaScript 将其忽略，并尝试计算表达式的余下部分，余下部分正好是数值的显式类型转换方法第四条，因此输出 0，解决办法如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Object]&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object Object]&#39;</span>
</code></pre></div><h4 id="布尔值的显示类型转换" tabindex="-1"><a class="header-anchor" href="#布尔值的显示类型转换"><span>布尔值的显示类型转换</span></a></h4><ol><li>使用 <strong>Boolean()</strong> 函数进行显示转换，转换规则与布尔值的隐式类型转换规则一致。</li><li>使用 <strong>两次一元运算符非!!</strong> 进行显示转换，转换规则与布尔值的隐式类型转换规则一致。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div>`,57),v={href:"https://zhuanlan.zhihu.com/p/85731460",target:"_blank",rel:"noopener noreferrer"},w={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"},j=p(`<h2 id="基本数据类型和构造函数" tabindex="-1"><a class="header-anchor" href="#基本数据类型和构造函数"><span>基本数据类型和构造函数</span></a></h2><p>基本数据类型可以通过字面量直接定义，也可以通过构造函数(new 运算)进行定义。使用字面量定义和使用构造函数定义的基本数据类型存在一定差别，具体表现如下：</p><ol><li>字面量定义的值存储在栈内存中，构造函数定义的值存储在堆内存中。</li><li>字面量定义的值是按值比较，构造函数定义的值是按引用比较。</li><li>字面量定义的值是不可变的，构造函数定义的值是可变的。</li><li>字面量定义的值不是对象，因此它们没有原型链，构造函数定义的值有原型链，可以访问其原型上的属性和方法。</li><li>字面量定义的值相比构造函数定义的值具有更高的性能，因为它们无需额外的堆内存分配和垃圾回收。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;number&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;object&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c <span class="token operator">===</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><h2 id="常用的数组方法" tabindex="-1"><a class="header-anchor" href="#常用的数组方法"><span>常用的数组方法</span></a></h2><p>数组的方法的主要用途都是对数组进行增删改查，Javascript 中数组的方法可以分为破坏性方法和非破坏性方法，破坏性是指调用方法后会影响原数组。主要的破坏性方法(七个)有<code>push</code>(尾增多个，返回数组长度)、<code>pop</code>(尾减，返回删除的值)、<code>shift</code>(头减，返回删除的值)、<code>unshift</code>(头增多个，返回数组长度)、<code>splice</code>、<code>sort</code>(排序，参数为排序函数，a 大于 b 则[b,a]，a 小于 b 则[a,b])和<code>reverse</code>(反转数组)，注意前四种方法的返回值注定了它们<strong>不可以被链式调用</strong>，splice 是一个功能性很强的方法，介绍如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> itemN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>参数一 start 表示起始的索引，可以为<strong>负索引</strong>；参数二 deleteCount 表示从 start 开始（包括 start）要删除的元素个数，当 deleteCount<strong>小于等于 0</strong>时，此时不会删除元素，且你必须指定至少一个后续参数 item，<strong>在 start 之前添加新元素</strong>。</p><p>通过使用 splice 方法，可以轻松实现对数组的增(deleteCount=0)、删(deleteCount&gt;0)、改(deleteCount=itemCount)。</p>`,9),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",target:"_blank",rel:"noopener noreferrer"},_=p(`<p>非破坏性的数组方法很多，这里只列举笔者常用的一些，完整的方法可以到 MDN 查看。</p><ol><li><code>concat</code>，该方法用于连接数组，需要注意的是，concat 方法在使用时会<strong>先展开(flat)一次被连接数组</strong>，如下所示：</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,[5,6],7]</span>
</code></pre></div><ol start="2"><li><code>slice(a,b)</code>，该方法用于截取数组，参数一表示截取的起始索引（包含），参数二表示截取的终止索引（不包含），其中参数一二均可以为负索引，参数二可以省略，表示截取到数组最后一个元素（包含）。</li><li><code>indexOf(a,b)</code>，该方法用于查找符合条件的索引，参数 b 表示查找的开始索引值，如果不存在则返回-1，存在则返回对应的索引值，只返回第一次匹配的索引值，多个匹配值不重复返回。</li><li><code>includes(a,b)</code>，该方法与 indexOf 的作用一致，区别在于如果存在返回 true，不存在则返回 false。</li><li><code>find(function)</code>，该方法用于查找符合条件的<strong>第一个</strong>元素的值，未找到则返回 undefined，function 提供了查找条件，具体使用方法如下：</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> found <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> element <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 注意，只要参数是一个function，那么必然会传入三个参数————element,index,array，后续所有的数组方法(除了reduce方法)同理。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: 12</span>
</code></pre></div><ol start="6"><li>与<code>find(function)</code>类似的方法还有<code>findIndex(function)</code>，唯一的不同就是返回的是第一个符合查找条件的元素的<strong>索引</strong>。</li><li><code>join(x)</code>，该方法用于将数组转换为字符串，参数 x 表示字符串的每个元素间的分隔符。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1,2,3&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1 2 3&quot;</span>
</code></pre></div><ol start="8"><li><code>some(function)</code>，该方法用于测试数组中是否存在至少一个元素满足条件，存在返回 true，否则返回 false（简记：一真即真，全假为假）。</li><li><code>every(function)</code>，该方法用于测试数组中的每一个元素是否都满足条件，全满足则返回 true，否则返回 false（简记：一假即假，全真为真）。</li><li><code>filter(function)</code>，该方法用于过滤出数组中满足条件的元素，并返回由这些元素构成的新数组。</li><li><code>forEach(function)</code>，该方法用于对数组中的每一个元素进行一次 function 操作，注意，不可以通过这个函数对数组元素进行修改，因为它的返回值总是 undefined；除非抛出异常，否则<strong>无法提前中断 forEach 循环</strong>。</li><li><code>map(function)</code>，该方法用于对数组中的元素进行批量操作，并返回新的数组。</li><li><code>reduce(function)</code>，该方法对数组中的每个元素按序执行一个提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 如果没有指定initialValue，那么数组的第一个元素会作为initialValue使用</span>
<span class="token keyword">const</span> initialValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// accumulator表示上一次运算的结果，currentValue表示当前迭代的元素值</span>
<span class="token comment">// currentValue表示当前迭代的元素的索引，array表示原数组</span>
<span class="token keyword">const</span> sumWithInitial <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">,</span>
  initialValue
<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sumWithInitial<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: 10</span>
</code></pre></div><ol start="14"><li><code>flat(x)</code>，该方法用于展平数组，参数 x 表示展平的层数。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0,1,2,[3,[4,5]]]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0,1,2,3,4,5]</span>
</code></pre></div><ol start="15"><li><code>keys()</code>，该方法用于获取数组的索引，返回值是一个数组的索引迭代器对象，常与 for...of 循环配合使用。</li><li><code>values()</code>，该方法用于获取数组的值，返回值是一个数组的值迭代器对象，常与 for...of 循环配合使用。</li><li><code>entries()</code>，该方法用于获取数组的键值对，常与 for...of 循环以及解构赋值配合使用。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> element<span class="token punctuation">]</span> <span class="token keyword">of</span> a<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 0 &#39;a&#39;</span>
<span class="token comment">// 1 &#39;b&#39;</span>
<span class="token comment">// 2 &#39;c&#39;</span>
</code></pre></div><ol start="18"><li><code>fill(value, start, end)</code>，value 用来填充数组元素的值，如果 value 是个对象，那么数组的每一项都会引用这个元素。start 表示填充的起始索引（包括），end 表示填充的终止索引（不包括）。</li><li><code>at(x)</code>，该方法用于查找索引为 x 的元素的值，x 可以是负索引。</li><li><code>Array.from(arrayLike)</code>，用于将类数组（如 keys、values 的返回值）转换为真正的数组。</li><li><code>Array.isArray(x)</code>，用于判断 x 是否为数组，返回值为布尔值。</li><li><code>Array.of(x1, x2, ...)</code>，用于创建由参数构成的数组，该方法的主要作用是弥补<code>Array()</code>在构造数组时的不足。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由两个空槽构成的数组</span>
<span class="token keyword">const</span> arr1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2]，数组的长度为1，值为2</span>
</code></pre></div><ol start="23"><li><code>with(index,value)</code>，该方法用于将索引为 index 的值替换为 value。</li></ol><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><ol><li>数组增加元素的方法：push、unshift、splice、concat</li><li>数组删除元素的方法：pop、shift、splice、slice</li><li>数组查找元素的方法：indexOf、includes、find、findIndex、at、filter、some、every</li><li>数组修改元素的方法：splice、with</li><li>数组排序的方法：sort、reverse</li><li>数组批量操作的方法：forEach、map、reduce</li><li>数组的静态方法：of、from、isArray</li><li>其他：fill、keys、values、entries、flat、join</li></ol><h2 id="常用的字符串方法" tabindex="-1"><a class="header-anchor" href="#常用的字符串方法"><span>常用的字符串方法</span></a></h2><h2 id="var、let、const-的区别" tabindex="-1"><a class="header-anchor" href="#var、let、const-的区别"><span>var、let、const 的区别</span></a></h2><p>var 是 ES6 之前用于声明变量的关键词，而 let 和 const 是 ES6 新增的用于声明变量的关键词。它们的主要区别如下：</p><ol><li>var 声明的变量具有<strong>函数级作用域</strong>（声明的变量仅在当前函数内可见），let 和 const 声明的变量具有<strong>块级作用域</strong>（声明的变量在当前块中可见，一对{}就是一个块）。</li><li>var、let 和 const 声明的变量<strong>都会变量提升</strong>（声明的变量会被提升到它们所在的作用域的顶部），不同的是，var 定义的变量可以在声明之前被访问，返回的值是 undefined，而 let 和 const 声明的变量从代码块开始执行一直到变量被声明并被初始化的这段时间内，一直处于<strong>暂时性死区</strong>，当用户尝试在这段时间内访问这些变量时，就会抛出<strong>ReferenceError</strong>。</li><li>var 可以重复声明同一变量，重复声明只会更新该变量的值，而 let 和 const 不允许在同一作用域中多次声明，会抛出<strong>SyntaxError</strong>错误。</li><li>var 和 let 可以先进行声明再进行初始化，而<strong>const 在声明时必须进行初始化且后续不可以重新进行赋值</strong>。</li><li><strong>在全局作用域使用 var 声明的变量会成为全局对象的属性</strong>，而使用 let 和 const 声明的变量则不会，减少了全局命名冲突的风险。</li></ol><p>（使用 let 可以减少闭包的使用，减少全局变量污染出现的可能性）</p><h2 id="和" tabindex="-1"><a class="header-anchor" href="#和"><span>==和===</span></a></h2><p>==（相等运算符）进行比较前，通常会对两边的操作数进行显式类型转换，再对判断两边操作数的值是否相等。===（严格相等运算符）则要求运算符两边的操作数的值和类型均需要保持一致。</p><p>相等运算符的转换规则如下：</p>`,26),O=p("<li><p>两边操作数类型一致： 1.1 字符串：两边需完全一致；</p><p>1.2 数值：两边需完全一致，特别的是，<strong>-0==+0</strong>，<strong>NaN!=NaN</strong>，只要有一个操作数为 NaN，那运算结果必然为 false；</p><p>1.3 布尔值：两边需完全一致；</p><p>1.4 BigInt：两边需完全一致；</p><p>1.5 SymBol：两边需引用相同的 Symbol；</p><p>1.6 Object：两边需引用相同的 Object；</p></li><li><p>两边的操作数出现 null 或者 undefined，则另一个操作数也必须为 null 或者 undefined 才会返回 true，否则返回 false；</p></li><li><p>当一边的操作数是 Object 另一边是基本数据类型时，按顺序使用该对象的 toPrimitive 方法、valueOf 方法和 toString 方法将该对象转换为基本数据类型后进行比较；</p></li>",3),S=n("p",null,"两边操作数类型不一致但都是基本数据类型： 4.1 如果一个操作数是 Symbol 另一个不是，返回 false；",-1),E=n("p",null,"4.2 如果一个操作数是布尔值另一个不是，则将布尔值转换为数值 0 或 1，再重复步骤 4；",-1),N=n("p",null,"4.3 如果一个操作数是字符串另一个是数值，则使用 Number()函数将字符串转换为数值，再进行比较；",-1),I=n("p",null,"4.4 如果一个操作数是 BigInt 另一个是数值，则比较两个数的数值部分；",-1),C=n("p",null,"4.5 如果一个操作数是 BigInt 另一个是字符串，则使用 BigInt()函数将字符串转换为 BigInt，再进行比较；",-1),A={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Equality",target:"_blank",rel:"noopener noreferrer"},M=p(`<h2 id="深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝"><span>深拷贝和浅拷贝</span></a></h2><p>深拷贝和浅拷贝是用于复制引用数据类型的两种不同的实现方法。深拷贝和浅拷贝的区别在于是否复制引用数据类型内部的引用数据类型。实现深浅拷贝的方法有很多，可以选择直接引入 loadash 中的 clone 和 cloneDeep 方法，也可以采用以下的方法。</p><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝</span></a></h3><p>浅拷贝只复制对象本身及其内部的基本数据类型，对于对象内部的引用数据类型，它只复制对该引用数据类型的引用，而不是复制整个引用数据类型。（换言之，当原对象中的引用数据类型的某个属性被修改时，浅拷贝对象也会相应地进行修改）</p><p>实现浅拷贝的方法如下：</p><ol><li><strong>对象的 Object.assign()</strong> 数组是特殊的对象，因此也可以使用 Object.assign()对数组进行浅拷贝。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;blank&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;goh&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// goh</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// blank</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name <span class="token operator">===</span> newObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><ol start="2"><li><strong>数组的 slice()和 concat()、Array.from()</strong> 这三个方法只能实现对数组的浅拷贝。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// let newArr = [].concat(arr);</span>
<span class="token comment">// let newArr = Array.from(arr);</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3,2,3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token operator">===</span> newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><ol start="3"><li><strong>展开语法...</strong> 展开语法既可以用于对象的浅拷贝，也可以用于数组的浅拷贝。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;blank&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;goh&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// goh</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// blank</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name <span class="token operator">===</span> newObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><ol start="4"><li>手写浅拷贝</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> copy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h3><p>深拷贝递归地复制对象及其内部所有的引用数据类型，它会创建一个完全独立于原对象的复制。（换言之，原对象的任何修改都不会引起新对象的修改），深拷贝可以用来创建数据的快照和备份。</p><ol><li><strong>JSON.parse(JSON.stringfy())</strong> 使用 JSON 的序列化和反序列化，缺点是由于<strong>undefined、函数、Symbol 不符合 JSON 语法</strong>，因此在序列化时会被忽略；此外，<strong>NaN、Infinity 和-Infinity 在序列化时会被转换为 null</strong>。</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">c</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">NaN</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { d: null }</span>
</code></pre></div><p>这种写法还不能解决循环引用的问题：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>
</code></pre></div><ol start="2"><li><p>手写深拷贝 实现目标：</p><p>1.1 支持对象、数组、日期、正则的拷贝。</p><p>1.2 处理原始类型（原始类型直接返回，只有引用类型才有深拷贝这个概念）。</p><p>1.3 处理 Symbol 作为键名的情况。</p><p>1.4 处理函数（函数直接返回，拷贝函数没有太大意义）。</p><p>1.5 处理 DOM 元素（DOM 元素直接返回，拷贝 DOM 元素没有太大意义）。</p><p>1.6 额外开辟一个储存空间 WeakMap，解决循环引用递归爆栈问题（引入 WeakMap 的另一个意义，配合垃圾回收机制，防止内存泄漏）。</p></li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 额外开辟一个存储空间WeakMap来存储当前对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;null&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">;</span> <span class="token comment">// 如果是原始数据类型或者函数就不进行拷贝操作</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理日期</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理正则</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">HTMLElement</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">;</span> <span class="token comment">// 处理 DOM元素</span>
  <span class="token comment">// 这里还可以按需求扩展其他类型</span>
  <span class="token comment">// 是引用类型的话就要进行深拷贝</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当需要拷贝当前对象时，先去存储空间中找，如果有的话直接返回</span>
  <span class="token keyword">const</span> cloneTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">target<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新的克隆对象或克隆数组</span>
  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> cloneTarget<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果存储空间中没有就存进 map 里</span>
  Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 引入 Reflect.ownKeys，处理 Symbol 作为键名的情况</span>
    cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归拷贝每一层</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span> <span class="token comment">// 返回克隆的对象</span>
<span class="token punctuation">}</span>
</code></pre></div>`,21),T={start:"3"},P=n("strong",null,"structuredClone()",-1),F={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Structured_clone_algorithm",target:"_blank",rel:"noopener noreferrer"},R={href:"https://juejin.cn/post/7072528644739956773",target:"_blank",rel:"noopener noreferrer"},L=p(`<h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h2><p>闭包是由函数以及<strong>声明</strong>该函数的词法环境组成的，闭包是一个有权访问另一个函数内部变量的函数。</p><p>闭包的主要作用有两点：一是创建私有变量，二是延长变量的生命周期。</p><p>闭包的实际应用场景之一是函数柯里化，柯里化的目的是避免频繁调用具有相同参数的函数，提高对函数的重用，如下是利用闭包实现函数柯里化的一个例子：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> getAreaWithWidth10 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 减少了对重复参数10这一函数的调用</span>
<span class="token keyword">let</span> AreaWith10And20 <span class="token operator">=</span> <span class="token function">getAreaWithWidth10</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> AreaWith10And30 <span class="token operator">=</span> <span class="token function">getAreaWithWidth10</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>闭包的另一个实际应用场景是模拟私有方法，例子如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">makeCounter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    num <span class="token operator">+=</span> val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">change</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">change</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> counter1 <span class="token operator">=</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> counter2 <span class="token operator">=</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
counter1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
counter2<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -2</span>
</code></pre></div>`,7),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures",target:"_blank",rel:"noopener noreferrer"},D=n("h2",{id:"作用域和作用域链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#作用域和作用域链"},[n("span",null,"作用域和作用域链")])],-1),J=n("p",null,"作用域是当前的执行上下文，如果一个变量或表达式不在作用域中，那么它就不能被访问。Javascript 的作用域可以分为三种：分别是全局作用域、函数级作用域和块级作用域。任何不在函数中或者大括号中声明的变量，都处在全局作用域中，全局作用域声明的变量可以在程序的任意位置被访问；在函数中声明的变量处在一个函数级作用域中，这些变量只能在函数内部被访问；使用关键字 let 和 const 声明的变量处在一个块级作用域中，这些变量只能在大括号中被访问。",-1),z=n("p",null,"Javascript 遵循词法作用域（静态作用域），即变量在编译阶段就已经确定了，而不是在运行时确定。（区别于动态作用域）",-1),W=n("p",null,"当在 Javascript 中查找一个变量时，Javascript 引擎会首先在当前作用域查找该变量，如果当前作用域未声明该变量，则到它的上层作用域查找，重复这个流程直到查找到全局作用域，这就是作用域链。",-1),H={href:"https://juejin.cn/post/6844904069413224462",target:"_blank",rel:"noopener noreferrer"},X=p(`<h2 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链"><span>原型和原型链</span></a></h2><p>原型(prototype)是 Javascript 中所有对象都有的一个内置属性，原型自身也是个对象，因此原型也会有自己的原型，这也构成了原型链，原型链<strong>终止于一个原型为 null 的对象上</strong>。</p><p>当你试图在一个对象上查找一个属性时，如果该对象上不存在该属性，那么就会在它的原型上搜索该属性，如果仍不存在则在原型的原型上搜索该属性直至到达原型链的末端，此时会返回 undefined。</p><p>指向对象原型的属性并不被命名为 prototype，不同浏览器可能有不同的标准，通常情况下你可以通过<code>__proto__</code>属性访问对象的原型。此外，访问对象的原型还可以使用<code>Object.getPrototypeOf()</code>方法。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Function<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><p>属性遮蔽是指如果原型上的属性自身也有，那么会优先调用自身的属性。</p><p>设置原型的方法：使用<code>Object.create(x)</code>，该方法会创建一个以对象 x 原型的对象；使用构造函数，如下所示：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> personPrototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好，我的名字是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">！</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> personPrototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或</span>
<span class="token comment">// Person.prototype.greet = personPrototype.greet;</span>
</code></pre></div><p>由于历史原因，一些内置构造函数的 prototype 属性本身就是其自身的实例。例如，Number.prototype 是数字 0，Array.prototype 是一个空数组，RegExp.prototype 是 /(?:)/。</p><p>理解以下四条有助于理解变量在原型链查找的过程：</p><ol><li>实例的<strong>proto</strong>属性指向构造函数的 prototype。<code>object(x).__proto__ === Object(X).prototype</code></li><li>一切对象实例(Object、Math、Map 等)都是通过构造函数构造的，因此有<code>Object(X).__proto__ === Function.prototype</code></li><li>函数(或其他任何类型)的原型是空的对象实例，因此有<code>Function(X).prototype.__proto__ === Object.prototype</code></li><li>对象的原型的原型是 null，即<code>Object.prototype.__proto__ === null</code></li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
<span class="token comment">// f.__proto === F.prototype   =&gt;  F.prototype.__proto__ === Object.prototype</span>
f<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeErroer</span>
<span class="token comment">// f.__proto === F.prototype   =&gt;  F.prototype.__proto__ === Object.prototype  =&gt;  Object.prototype.__proto__ === null</span>
<span class="token constant">F</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
<span class="token comment">// F.__proto__ === Function.prototype  =&gt;  Function.prototype.__proto__ === Object.prototype</span>
<span class="token constant">F</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b</span>
<span class="token comment">// F.__proto__ === Function.prototype</span>
</code></pre></div>`,12),V={href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes",target:"_blank",rel:"noopener noreferrer"},Y=p(`<h2 id="类与继承" tabindex="-1"><a class="header-anchor" href="#类与继承"><span>类与继承</span></a></h2><p>如果一个类 A 继承于另一个类 B，那么我们称类 A 是类 B 的一个子类，类 B 是类 A 的一个父类（超类）。通过使用继承，子类可以使用父类拥有的属性和方法，减少重复代码的编写，而子类也可以重写父类中的属性和方法，达到多态的效果。</p><p>Javascript 实现继承的方式有很多，以下是几种实现方式：</p><h3 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承"><span>原型链继承</span></a></h3><p>原型链继承是通过将子类的原型指向父类的一个实例实现，核心代码是<code>Child.prototype = new Parent()</code></p><p>原型链继承的主要缺点有：1. 父类中引用类型的数据被所有子类实例共享。 2. 子类在创建实例无法向父类传递参数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;goh&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sleep&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 当你使用 Child.prototype = new Parent() 来设置子类的原型时，子类将失去其自身构造函数的引用，而必须手动修复它</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constrcutor <span class="token operator">=</span> Child<span class="token punctuation">;</span>
<span class="token keyword">let</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child1<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;play&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;say&quot;,&quot;sleep&quot;,&quot;play&quot;]</span>
child2<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;say&quot;,&quot;sleep&quot;,&quot;play&quot;,&quot;read&quot;]</span>
</code></pre></div><h3 id="借用构造函数" tabindex="-1"><a class="header-anchor" href="#借用构造函数"><span>借用构造函数</span></a></h3><p>此方法是通过在子类中调用父类的构造方法实现的，核心代码是<code>Parent.call(this,args)</code></p><p>借用构造函数解决了参数传递和属性共享的问题，但是，每次创建新的子类实例时都会创建新的方法，函数的复用降低。(同时无法通过原型链来判断继承关系，即 instanceof 的返回值是 false)</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sleep&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 创建两次</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">&quot;lee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">&quot;wang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lee</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// wang</span>
child1<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;play&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;say&quot;,&quot;sleep&quot;,&quot;play&quot;]</span>
child2<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;say&quot;,&quot;sleep&quot;,&quot;read&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>say <span class="token operator">===</span> child2<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，创建了两次</span>
</code></pre></div><h3 id="组合继承" tabindex="-1"><a class="header-anchor" href="#组合继承"><span>组合继承</span></a></h3><p>组合继承是指将原型链继承和借用构造函数两种方法结合起来的方法，以发挥二者的长处。</p><p>组合继承仍然存在缺点：<code>Parent.call(this,name)</code>和<code>Child.prototype = new Parent()</code>调用了两次父类的构造函数，造成了不必要的额外开销。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sleep&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 多个实例间的属性不会共用，可以进行传参</span>
<span class="token punctuation">}</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 创建多个子类实例只会创建一次方法，实现了方法复用</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>construtor <span class="token operator">=</span> Child<span class="token punctuation">;</span> <span class="token comment">// 可以通过原型链判断继承关系</span>
<span class="token keyword">let</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">&quot;lee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">&quot;wang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lee</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// wang</span>
child1<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;play&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;say&quot;,&quot;sleep&quot;,&quot;play&quot;]</span>
child2<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;say&quot;,&quot;sleep&quot;,&quot;read&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>say <span class="token operator">===</span> child2<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><h3 id="原型式继承" tabindex="-1"><a class="header-anchor" href="#原型式继承"><span>原型式继承</span></a></h3><p>原型式继承是指将已有对象作为原型创建新的对象，该方法不需要使用严格意义上的构造函数。</p><p>原型式继承也有会共享父类属性和函数无法复用的缺点。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;parent&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;watch&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;see&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> child1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个以parent为原型的对象</span>
<span class="token keyword">let</span> child2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
child1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;child1&quot;</span><span class="token punctuation">;</span>
child2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;child2&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
child1<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child2<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;play&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;watch&quot;, &quot;see&quot;, &quot;say&quot;, &quot;play&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;watch&quot;, &quot;see&quot;, &quot;say&quot;, &quot;play&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;watch&quot;, &quot;see&quot;, &quot;say&quot;, &quot;play&quot;]</span>
</code></pre></div><p>Object.create()是 ES5 新增的方法，也可以使用下面的代码进行简单替换：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="寄生式继承" tabindex="-1"><a class="header-anchor" href="#寄生式继承"><span>寄生式继承</span></a></h3><p>寄生式继承是一种基于原型式继承实现的一种方法，其实现的核心思想是创建一个函数用于封装函数继承这一过程，并在函数内部对继承对象进行进一步功能增强。核心代码是<code>createObj</code>函数。</p><p>寄生式继承相较于原型式继承减少了重复代码的编写，但其仍具有函数无法复用以及父类属性共享的缺点。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 可以创建子类共有的方法</span>
  newObj<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;parent&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;watch&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;see&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> child1 <span class="token operator">=</span> <span class="token function">createObj</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个以parent为原型的对象</span>
<span class="token keyword">let</span> child2 <span class="token operator">=</span> <span class="token function">createObj</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
child1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;child1&quot;</span><span class="token punctuation">;</span>
child2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;child2&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
child1<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child2<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;play&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;watch&quot;, &quot;see&quot;, &quot;say&quot;, &quot;play&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;watch&quot;, &quot;see&quot;, &quot;say&quot;, &quot;play&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;watch&quot;, &quot;see&quot;, &quot;say&quot;, &quot;play&quot;]</span>
</code></pre></div><h3 id="寄生式组合继承" tabindex="-1"><a class="header-anchor" href="#寄生式组合继承"><span>寄生式组合继承</span></a></h3><p>该方法结合了上述几种方法的优点，核心代码是<code>myExtend</code>方法（寄生继承）与<code>prototype</code>属性（组合继承）的结合使用。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myExtends</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注意create方法传入的参数需要是一个对象，不能直接传入parent，因为这里形式参数parent是构造函数Parent，他不是一个对象</span>
  child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 修正Child原型的constrcutor属性，因为上一步会使该属性指向Parent构造函数</span>
  child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span>
  <span class="token comment">// 以上运行结束后，会有Child.prototype.__proto__ === Parent.prototype(子类是父类的一个实例)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;play&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 多个实例间的属性不会共用，可以进行传参</span>
<span class="token punctuation">}</span>
<span class="token function">myExtends</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 向子类的原型上添加方法这一操作必须放在myExtends方法之后，因为myExtends方法修改了子类原型的指向</span>
<span class="token comment">// 创建多个子类实例只会创建一次方法，实现了方法复用</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token string">&quot;parent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">&quot;child1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">&quot;child2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child1<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;child1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child2<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;child2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;say&#39;, &#39;play&#39;, &#39;child1&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;say&#39;, &#39;play&#39;, &#39;child2&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;say&#39;, &#39;play&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">child1 instanceof Parent </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>child1 <span class="token keyword">instanceof</span> <span class="token class-name">Parent</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
child2<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello---</span>
parent<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>
</code></pre></div><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1"><span>小结</span></a></h3><p>Javascript 中实现继承的方式有很多种，可以分为两大类，一类是不使用<code>Object.create()</code>方法的，如原型链继承和借用构造函数，这两种方法结合使用即为组合继承，另一类是使用<code>Object.create()</code>方法的，如原型式继承和寄生式继承，将组合继承和寄生式继承结合即可得到寄生式组合继承，寄生式组合继承是<code>extends</code>关键字的实现方法。</p>`,30),U={href:"https://juejin.cn/post/6844904161071333384",target:"_blank",rel:"noopener noreferrer"},Q=p(`<h2 id="apply、bind、call" tabindex="-1"><a class="header-anchor" href="#apply、bind、call"><span>apply、bind、call</span></a></h2><p>apply 方法和 call 方法都是以指定的 this（方法的第一个参数）来调用函数，而 bind 方法是创建一个原函数的拷贝，并将参数一作为 this 绑定到这个新的函数上。</p><p>三者都可以用来修改 this，区别如下：</p><ol><li>apply 和 call 修改 this 后会立即调用，而 bind 不会</li><li>apply 传递参数是通过数组，call 则是通过参数列表，bind 的参数传递可以分多次进行</li><li>apply 和 call 只是暂时修改 this，bind 是创建一个具有新 this 指向的函数拷贝</li></ol><p>手写 call：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">callPolyfill</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断调用者是否为函数类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 非严格模式下，当this为null或者undefined时会被转换为全局对象，浏览器下为window</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>
  <span class="token comment">// 记录原函数</span>
  <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建代理</span>
  <span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置访问拦截器</span>
    <span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 当新的this访问原函数时，返回原函数</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">&quot;fn&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> fn<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 访问其他属性时，返回属性对应的属性值</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> proxy<span class="token punctuation">[</span><span class="token string">&quot;fn&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>区别于传统的 call 实现方法，该方法可以通过<code>function keys(){ Object.keys(this) }</code>这一测试用例，总的来说，个人不建议通过为对象添加属性来实现 call 方法，包括本条参考 1 中用 Symbol 来实现的方式，因为你可以轻松找到一个反例证明他不是完善的，如<code>function Symbols(){ return Object.getOwnPropertySymbols(this) }</code>。</p><p>手写 bind：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bindPolyfill</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>
  <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token comment">// bind生成的函数可以再次传参</span>
  <span class="token keyword">let</span> <span class="token function-variable function">bindFn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>moreArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// bind生成的函数可能会被bind调用或者new调用，bind调用的this指向bind绑定的对象（context），new调用的this指向new生成的新函数（this）</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">bindFn</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> context<span class="token punctuation">,</span>
      <span class="token operator">...</span>args<span class="token punctuation">,</span>
      <span class="token operator">...</span>moreArgs
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 修复原型链(箭头函数没有prototype)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bindFn<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> bindFn<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,9),G={href:"https://leetcode.cn/problems/call-function-with-custom-context/solutions/2289391/2693-shi-yong-zi-ding-yi-shang-xia-wen-d-3zxi/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://juejin.cn/post/6844903906279964686",target:"_blank",rel:"noopener noreferrer"},K=p(`<h2 id="this" tabindex="-1"><a class="header-anchor" href="#this"><span>this</span></a></h2><p>this 关键字是函数在运行时自动生成的一个内部对象，this 只能在函数中使用，总指向它的调用者。</p><p>判断优先级顺序：箭头函数、new、bind、apply/call、obj.、直接调用、不在函数里，具体规则如下：</p><ol><li>箭头函数：箭头函数内部的 this 指向外层的 this。</li><li>new：new 运算符的 this 指向 new 创建出来的新对象。</li><li>bind：bind 创建的函数的 this 指向 bind 的参数，且多个 bind 链式调用的 this 扔指向第一个 bind 的参数。</li><li>apply/call：apply 和 call 中的 this 指向它们的参数。</li><li>obj.：obj.调用的方法中的 this 指向 obj。</li><li>直接调用：函数被直接调用时，this 指向全局对象。</li><li>不在函数里：如果是在浏览器的<code>&lt;script&gt;</code>中，则 this 指向 window，如果是在 node.js 的模块文件中，则 this 指向 module.exports。</li></ol><p>此外，在非严格模式下，this 不能为 undefined 或者 null，undefined 和 null 会转变为全局对象，严格模式则与之相反。类（class）内部默认为严格模式。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">arrowFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arrowFunc<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">&quot;obj&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 内部是箭头函数，this和外部一致，外部是obj.，this指向obj，obj._name = obj</span>
obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj</span>
<span class="token comment">// 内部是箭头函数，this和外部一致，外部是直接调用，this指向window，window._name = undefined</span>
func <span class="token operator">=</span> obj<span class="token punctuation">.</span>func<span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token comment">// 内部是箭头函数，this和外部一致，外部使用bind，this指向{ _name: &quot;newObj&quot; }，{ _name: &quot;newObj&quot; }._name = newOb</span>
obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">&quot;newObj&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// newObj</span>
<span class="token comment">// 内部是箭头函数，this和外部一致，外部使用bind，this指向undefined，非严格模式浏览器环境下转换为window，window._name = undefined</span>
obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token comment">// 内部是箭头函数，this和外部一致（相当于apply失效，箭头函数优先级最高），外部使用bind，this指向{ _name: &quot;bindObj&quot; }，{ _name: &quot;bindObj&quot; }._name = bindObj</span>
obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">&quot;bindObj&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">&quot;applyObj&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bindObj</span>
<span class="token comment">// 内部是箭头函数，this和外部一致（相当于bind失效，箭头函数优先级最高），外部使用apply，this指向{ _name: &quot;applyObj&quot; }，{ _name: &quot;applyObj&quot; }._name = applyObj</span>
obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">&quot;applyObj&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">&quot;bindObj&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// applyObj</span>
</code></pre></div>`,6),Z={href:"https://juejin.cn/post/6946021671656488991",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://github.com/mqyqingfeng/Blog/issues/7",target:"_blank",rel:"noopener noreferrer"},sn=n("h2",{id:"执行上下文",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#执行上下文"},[n("span",null,"执行上下文")])],-1),an=n("p",null,"当 JS 引擎解析到可执行代码片段时，就会进行一些执行代码前的准备工作，这个准备工作也被叫做执行环境，也可以叫做执行上下文。",-1),tn=n("p",null,"在 JavaScript 中，执行上下文主要有三种，分别是全局执行上下文、函数执行上下文和 eval 函数执行上下文。",-1),pn=n("p",null,"全局执行上下文是最基础的执行上下文，每个程序一定有且仅有一个全局执行上下文，它在程序的生命周期内会一直存在于执行栈的栈底不会被弹出，全局执行上下文会生成一个全局对象，在浏览器环境下这个全局对象就是 window。",-1),on=n("p",null,[s("函数执行上下文则是在函数"),n("strong",null,"被调用"),s("时创建的上下文，多次调用同一函数时，每次调用都会产生一个全新的函数上下文。")],-1),en={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval",target:"_blank",rel:"noopener noreferrer"},cn=p(`<p>执行上下文是的生命周期分为三个阶段，分别是创建阶段、执行阶段和销毁阶段。这里我们主要讨论 ES5 之后的执行上下文（ES3 的执行上下文可以参见本条参考中的内容）</p><p>创建阶段是指函数即将被调用，但内部代码尚未执行的时候，在这个阶段，主要完成了三件事，分别是确定 this 的值，创建词法环境（Lexical Environment）以及创建变量环境（Variable Environment），相关伪代码如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>ExecutionEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
    ThisBinding <span class="token operator">=</span> value<span class="token punctuation">;</span>
    LexicalEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    VariableEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其中，词法环境主要是用来存储函数以及由 let 和 const 声明的变量，不同执行上下文的词法环境也有所不同，主要区别是对外部环境的引用不同，以下是全局执行上下文和函数执行上下文的伪代码：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>GlobalExecutionEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
    ThisBinding <span class="token operator">=</span> value<span class="token punctuation">;</span>
    LexicalEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Object&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示这是全局执行上下文的词法环境记录器，即对象环境记录器</span>
            <span class="token literal-property property">a</span><span class="token operator">:</span> uninitialized<span class="token punctuation">,</span> <span class="token comment">// 假设程序中存在一个由let声明的变量a，在执行阶段时该变量为未初始化的状态</span>
            <span class="token literal-property property">add</span><span class="token operator">:</span> func <span class="token comment">// 假设程序中存在一个函数add，func表示这是一个函数</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 全局执行上下文的外部环境引用一定为null</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    VariableEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
FunctionExecutionEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
    ThisBinding <span class="token operator">=</span> value<span class="token punctuation">;</span>
    LexicalEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Declarative&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示这是函数执行上下文的词法环境记录器，即声明式环境记录器</span>
            <span class="token literal-property property">Arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token number">0</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
                <span class="token number">1</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>
            <span class="token punctuation">}</span> <span class="token comment">// 表示该函数有两个形式参数，它们的值分别为10和20</span>
            <span class="token literal-property property">b</span><span class="token operator">:</span> uninitialized <span class="token comment">// 假如程序中存在一个由const声明的常量b，在执行阶段时该常量为未初始化的状态</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">outer</span><span class="token operator">:</span> globalOrOuterFunction <span class="token comment">// 函数执行上下文的外部环境引用可能是全局执行上下文，也可能是另一个全局执行上下文</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    VariableEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>与词法环境不同，变量环境则主要用于存储由 var 声明的变量，且这些变量在创建阶段就会被初始化为 undeifned（区别于词法环境中的变量会被设置为未初始化的状态，这也是变量提升的区别），以下是全局执行上下文和函数执行上下文的伪代码：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>GlobalExecutionEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
    ThisBinding <span class="token operator">=</span> value<span class="token punctuation">;</span>
    LexicalEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    VariableEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Object&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token comment">// 假如程序中存在一个由var声明的变量c，在执行阶段时该常量被初始化为undefined</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
FunctionExecutionEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
    ThisBinding <span class="token operator">=</span> value<span class="token punctuation">;</span>
    LexicalEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    VariableEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Declarative&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token comment">// 假如程序中存在一个由var声明的变量d，在执行阶段时该常量被初始化为undefined</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">outer</span><span class="token operator">:</span> globalOrOuterFunction
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>创建阶段完成了上述的工作后，就开始执行阶段的工作。执行阶段就是对词法环境和变量环境中的变量进行赋值，特别的，如果在代码中找不到通过 let 声明的变量的值，它会被初始化为 undefined。</p><p>销毁阶段则是将当前执行上下文弹出调用栈，等待虚拟机回收该执行上下文。</p>`,9),ln={href:"https://juejin.cn/post/6844904158957404167",target:"_blank",rel:"noopener noreferrer"},un={href:"https://juejin.cn/post/6844903682283143181",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://zhuanlan.zhihu.com/p/107552264",target:"_blank",rel:"noopener noreferrer"},rn=p(`<h2 id="事件、事件流、事件处理器-事件模型、事件监听器-、事件委托" tabindex="-1"><a class="header-anchor" href="#事件、事件流、事件处理器-事件模型、事件监听器-、事件委托"><span>事件、事件流、事件处理器（事件模型、事件监听器）、事件委托</span></a></h2><p>Javascript 和 HTML 之间的交互是通过事件实现的，事件代表文档或浏览器窗口某个有意义的时刻，可以使用仅在事件发生时执行的监听器订阅事件。</p><p>事件流描述了页面接收事件的顺序，是从最具体的元素向上逐渐传播至没有那么具体的元素（IE 事件流/事件冒泡流），还是从最不具体的元素向下逐渐收缩至最具体的元素（事件捕获流）。除了这两种由 IE 和网景提出的事件流外，DOM2Events 规范提出了 DOM 事件流，该事件流分为三个阶段，分别是事件捕获阶段、到达目标阶段以及事件冒泡阶段。</p><p>为响应事件而调用的函数被称为事件处理器，常用的事件处理器有 HTML 事件处理器、DOM0 事件处理器、DOM2 事件处理器和 IE 事件处理器。HTML 事件处理器即在 HTML 元素中以属性的形式添加处理器，DOM0 事件处理器则是通过将一个函数赋值给一个元素的事件处理器属性，DOM2 事件处理器则是通过<code>addEventListener()</code>和<code>removeEventListener()</code>来实现，IE 事件处理器的 API 则是<code>attachEvent()</code>和<code>detchEvent()</code>。具体例子如下：</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML事件处理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;click!&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- DOM0事件处理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;click!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- DOM2事件处理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;.btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">btn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
      <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token boolean">false</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- IE已死，这里不作过多介绍 --&gt;</span>
</code></pre></div><p>HTML 事件处理器和 DOM0 事件处理器的优点是绑定速度快，具有很好的跨浏览器优势，缺点是只支持冒泡不支持捕获，同时一个元素上不能同时绑定多个事件处理函数，而 DOM2 事件处理器则很好的解决了这两个问题，<code>addEventListener()</code>的第三个参数的默认值为 false，表示事件流为事件冒泡流，为 true 则表示事件捕获流，同一元素多次使用<code>addEventListener()</code>添加事件处理函数不会被覆盖，不需要的事件处理函数可以通过<code>removeEventListener()</code>移除。</p><p>事件委托是指通过利用事件冒泡，将多个元素共有的事件放在它们的共同父元素之上，从而达到一个事件控制多个元素的效果。需要注意的是，并不是所有事件都能采用事件委托，如 blur 和 focus 事件不支持事件冒泡，因此也就没有事件委托这一说；此外，对于 mouseover、mouseout 这样频繁触发需要消耗较大性能的事件，也应尽量避免使用事件委托。</p><h2 id="new-运算" tabindex="-1"><a class="header-anchor" href="#new-运算"><span>new 运算</span></a></h2><p>new 运算符用于创建对象的一个实例。</p><p>new 运算符会进行如下四个步骤：</p><ol><li>创建一个空的对象{}</li><li>为步骤 1 创建的对象添加<strong>proto</strong>属性，并将该属性链接到构造函数的原型对象上</li><li>将步骤 1 创建的对象作为 this 的上下文</li><li>如果该构造函数没有返回对象（必须是对象/引用数据类型，不能是基本数据类型），则将 this 作为返回值，如果有则跳过此步骤 了解了以上流程后我们可以手写一个 new 运算符：</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断参数一是否为构造函数</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">&quot;参数一需为构造函数&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 步骤1</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 步骤2</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> func<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token comment">// 步骤3</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 步骤4</span>
  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,12),dn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://juejin.cn/post/6894142886456229902",target:"_blank",rel:"noopener noreferrer"},mn=p(`<h2 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax"><span>AJAX</span></a></h2><p>AJAX 全称为 async Javascript and XML，通过使用 AJAX，网页应用能够将从服务器获取的数据快速地将增量更新呈现在用户界面上，而不需要重载（刷新）整个页面。尽管 X 代表 XML（在 AJAX 模型中用来包装信息），但在使用时更常用的是 JSON，因为它更轻量。</p><p>为了使用 Javascript 向服务器发送一个 HTTP 请求，我们需要使用 XMLHttpReques 对象（可以将它理解为浏览器与服务器进行数据交换的中间媒介），使用该对象主要可以分为以下四个步骤：</p><ol><li>创建一个 XMLHttpRequest 对象</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ol start="2"><li>创建一个响应函数，当请求状态改变时调用该函数</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;readyState has been changed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> handler<span class="token punctuation">;</span>
</code></pre></div><ol start="3"><li>使用 open 方法与服务器建立连接</li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token punctuation">[</span>async<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>password<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>其中，method 表示要使用的 HTTP 方法的字符串（如 POST、GET、DELETE、PUT 等，考虑到兼容性问题，书写时最好使用大写字母），url 表示请求资源的 URL，async 表示是否异步执行操作，默认值为 true。（主线程上的同步请求很容易破坏用户体验，应该避免；实际上，许多浏览器已完全弃用主线程上的同步 XHR 支持） 4. 使用 send 方法向服务器发送请求</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>body 的默认值为 null，用于设置请求体。</p><p>步骤 2 中，我们需要判断请求状态是否改变，这里可以使用 XMLHttpRequest 的实例属性 readyState 进行判断，readyState 的值与其对应的状态如下表所示：</p><table><tr><th>值</th><th>状态</th><th>描述</th></tr><tr><td>0</td><td>UNSENT</td><td>代理被创建，但仍未调用open方法</td></tr><tr><td>1</td><td>OPENED</td><td>open方法已被调用</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td>send方法已被调用，并且可以获得相应头和响应状态</td></tr><tr><td>3</td><td>LOADING</td><td>相应体下载中，并且可以获取一部分responseText</td></tr><tr><td>4</td><td>DONE</td><td>下载操作已完成</td></tr></table>`,14),hn=p(`<table><tr><th>响应信息</th><th>响应状态码</th></tr><tr><td>信息响应</td><td>100-199</td></tr><tr><td>成功相应</td><td>200-299</td></tr><tr><td>重定向消息</td><td>300-399</td></tr><tr><td>客户端错误响应</td><td>400-499</td></tr><tr><td>服务端错误响应</td><td>500-599</td></tr></table><p>通过使用上述两个实例属性，我们可以进一步完善步骤 2 中的响应函数，如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 下载完毕时调用</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果成功相应则输出响应体</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 错误则返回相应响应状态码</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> handler<span class="token punctuation">;</span>
</code></pre></div>`,3),fn={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX",target:"_blank",rel:"noopener noreferrer"},qn=p(`<h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><p>正则表达式是用于匹配字符串中字符组合的模式，以下是正则表达式中部分特殊字符的含义：</p><table><tr><th>特殊字符</th><th>含义</th></tr><tr><td>\\（反斜杠）</td><td><p>\\ + 非特殊字符 = 特殊字符（\\ + n = \\n表示换行）</p><p>\\ + 特殊字符 = 非特殊字符（\\ + \\n = \\n表示为字符串，不进行转义）</p><p>使用字面量创建正则表达式时，反斜杠依照上述的规则进行匹配，如/a\\n/，表示匹配一个字母a紧跟一个换行符号</p><p>使用RegExp构造函数创建正则表达式时，由于传入的参数是一个字符串，且在字符串中反斜杠会被当作转义字符，因此需要在反斜杠前增加一个反斜杠表示不进行转义，如new RegExp(&quot;a\\\\n&quot;)，表示匹配一个字母a紧跟一个换行符号</p></td></tr><tr><td>^（脱字符）</td><td><p>^匹配输入的开始，当多行标志被设置为true时，也匹配换行符后紧跟的位置</p><p>/^a/，表示匹配以a开始的字符串</p></td></tr><tr><td>$</td><td><p>$匹配输入的结束，当多行标志被设置为true时，也匹配换行符前的位置</p><p>/a$/，表示匹配以a结束的字符串</p></td></tr><tr><td>{n}</td><td><p>n为正整数，表示前一个字符刚好出现n次</p><p>/a{2}/，可以匹配&#39;caan&#39;中所有的a，可以匹配&#39;caaan&#39;中的前两个a</p></td></tr><tr><td>{n,}</td><td><p>n为正整数，表示前一个字符至少出现n次</p><p>/a{2,}/，可以匹配&#39;caan&#39;和&#39;caaan&#39;中所有的a</p></td></tr><tr><td>{n,m}</td><td><p>n和m都是正整数，表示前一个字符至少出现n次，最多出现m次</p><p>/a{2,4}/，可以匹配&#39;caan&#39;和&#39;caaaan&#39;中所有的a，可以匹配&#39;caaaaan&#39;的前四个a</p></td></tr><tr><td>*</td><td><p>*等价于{0,}</p><p>/ba*/，可以匹配&#39;b&#39;中的b，可以匹配&#39;baa&#39;中的baa</p></td></tr><tr><td>+</td><td><p>+等价于{1,}</p><p>/ba+/，不可以匹配&#39;b&#39;，可以匹配&#39;baa&#39;中的baa</p></td></tr><tr><td>?</td><td><p>?等价于{0,1}</p><p>/ba?/，可以匹配&#39;b&#39;中的b，可以匹配&#39;baa&#39;中的ba</p></td></tr><tr><td>.</td><td><p>.默认匹配除换行符之外的任何单个字符</p><p>/a.a/，可以匹配&#39;aba&#39;中的aba，不可以匹配&#39;abba&#39;</p></td></tr><tr><td>a|b</td><td><p>a|b匹配a或b</p><p>/apple|banana/，可以匹配&#39;redapple&#39;中的apple，可以匹配&#39;bananai&#39;中的&#39;banana&#39;</p></td></tr><tr><td>[xyz]</td><td><p>[xyz]表示一个字符合集，可以匹配[]中的任意一个字符</p><p>可以使用-指定一个字符范围，如[0-9]表示匹配0到9中的任意一个字符</p><p>/x[abc]y/，可以匹配&#39;xac&#39;中的&#39;xac&#39;，不可以匹配&#39;xdc&#39;和&#39;xaby&#39;</p></td></tr><tr><td>[^xyz]</td><td><p>[^xyz]表示一个反向字符合集，可以匹配[]之外的任意一个字符</p><p>可以使用-指定一个字符范围，如[^0-9]表示匹配0到9之外的任意一个字符</p><p>/x[^abc]y/，不可以匹配&#39;xac&#39;中的&#39;xac&#39;和&#39;xmny&#39;，可以匹配&#39;xdc&#39;</p></td></tr><tr><td>(x)</td><td><p>(x)表示匹配x并且记住匹配项，称为捕获组，括号称为捕获括号</p><p>可以通过\\n来依次获取捕获组捕获到的字符串并重用</p><p>/(a{1,2})(b)\\1\\2/，可以匹配&quot;aabaab&quot;，不可以匹配&quot;aabab&quot;</p></td></tr><tr><td>(?:x)</td><td><p>(?:x)表示匹配x但不记住匹配项，称为非捕获组，括号称为非捕获括号</p><p>/(?:abc){1,2}/，可以匹配&quot;abcabc&quot;，不可以匹配&quot;aa&quot;</p></td></tr><tr><td>\\w</td><td><p>\\w匹配一个单字字符（字母、数字、下划线），等价于[0-9a-zA-Z_]</p><p>/a\\w/，可以匹配&quot;a100&quot;中的&quot;a1&quot;，不可以匹配&quot;a$&quot;</p></td></tr><tr><td>\\W</td><td><p>\\W匹配一个非单字字符（字母、数字、下划线），等价于[^0-9a-zA-Z_]</p><p>/a\\W/，不可以匹配&quot;a100&quot;中的&quot;a1&quot;，可以匹配&quot;a$&quot;</p></td></tr><tr><td>\\b</td><td><p>\\b匹配一个词的边界，一个词的边界是指匹配内容之前/后不是一个字（\\w）</p><p>/on\\b/，可以匹配&quot;moon,star&quot;中的&quot;on&quot;，不可以匹配&quot;moonlight&quot;</p></td></tr><tr><td>\\B</td><td><p>\\B匹配一个非词边界</p><p>/on\\B/，不可以匹配&quot;moon,star&quot;中的&quot;on&quot;，可以匹配&quot;moonlight&quot;</p></td></tr><tr><td>\\d</td><td><p>\\d匹配一个数字，等价于[0-9]</p><p>/\\d/，可以匹配&quot;this is 9&quot;中的&quot;9&quot;，不可以匹配&quot;this is nine&quot;</p></td></tr><tr><td>\\D</td><td><p>\\D匹配一个非数字，等价于[^0-9]</p><p>/\\d/，可以匹配&quot;this is 9&quot;中的&quot;t&quot;，不可以匹配&quot;12345&quot;</p></td></tr><tr><td>\\s</td><td><p>\\s匹配一个空白字符，包括空格、制表符（\\t、\\v）、换页符（\\f）、换行符（\\n）、回车符（\\r），等价于[\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</p><p>/\\s\\w/，可以匹配&quot;this is blank&quot;中的&quot; i&quot;，不可以匹配&quot;blank&quot;</p></td></tr><tr><td>\\S</td><td><p>\\s匹配一个非空白字符，等价于[^\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</p><p>/\\S\\w/，可以匹配&quot;this is blank&quot;中的&quot;th&quot;，不可以匹配&quot; &quot;</p></td></tr><tr><td>x(?=y)</td><td><p>x(?=y) 匹配x当且仅当x后面紧跟着y，这种模式被称为先行断言</p><p>/hello(?= world)/，可以匹配&quot;hello world!&quot;中的&quot;hello&quot;，不可以匹配&quot;hello blank&quot;中的&quot;hello&quot;</p></td></tr><tr><td>(?&lt;=y)x</td><td><p>(?&lt;=y)x 匹配x当且仅当x前面紧跟着y，这种模式被称为后行断言</p><p>/(?&lt;=hello )world/，可以匹配&quot;hello world!&quot;中的&quot;world&quot;，不可以匹配&quot;my world&quot;中的&quot;world&quot;</p></td></tr><tr><td>x(?!y)</td><td><p>x(?!y) 匹配x当且仅当x后面不是紧跟着y，这种模式被称为正向否定查找</p><p>/hello(?! world)/，可以匹配&quot;helloworld&quot;中的&quot;hello&quot;，不可以匹配&quot;hello world&quot;中的&quot;hello&quot;</p></td></tr><tr><td>(?&lt;!y)x</td><td><p>(?&lt;!y)x 匹配x当且仅当x前面不是紧跟着y，这种模式被称为反向否定查找</p><p>/(?&lt;!hello)world/，不可以匹配&quot;helloworld&quot;中的&quot;world&quot;，可以匹配&quot;hello world&quot;中的&quot;world&quot;</p></td></tr></table><h3 id="使用正则表达式" tabindex="-1"><a class="header-anchor" href="#使用正则表达式"><span>使用正则表达式</span></a></h3><p>要使用正则表达式，可以通过<code>RegExp</code>上的实例方法<code>test</code>和<code>exec</code>，以及<code>String</code>上的实例方法<code>search</code>、<code>match</code>、<code>matchAll</code>、<code>replace</code>和<code>split</code>。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=hello)\\s(\\w*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 匹配一个空白字符及其之后的所有字符，当且仅当前面紧跟着&quot;hello&quot;</span>
regExp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
regExp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回一个数组，数组的第一项为字符串中首个匹配项&quot; world&quot;，数组的第二项为捕获组&quot;world&quot;，groups表示命名捕获组的名称（无则为undefined），input表示匹配的原字符串，index表示正则表达式在字符串中首次匹配的索引，同时正则表达式的lastIndex会被更新，可以通过全局标志g和while循环获得所有匹配项</span>
<span class="token string">&quot;hello world&quot;</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回正则表达式在字符串中首次匹配的索引（无则为-1）</span>
<span class="token string">&quot;hello world hello blank&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同exec方法</span>
<span class="token string">&quot;hello world hello blank&quot;</span><span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=hello)\\s(\\w*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值是一个可迭代迭代器对象，需要使用for of遍历，返回字符串中所有与正则表达式匹配的内容，注意必须与全局标志g一起使用</span>
<span class="token string">&quot;hello world hello blank&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=hello)\\s(\\w*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;goh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;hellogoh hellogoh&#39;，也可以不使用全局标志g，只替换第一个匹配项</span>
<span class="token string">&quot;hello world hello blank&quot;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello </span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;&#39;, &#39;world &#39;, &#39;blank&#39;]</span>
</code></pre></div><h3 id="正则表达式的标志" tabindex="-1"><a class="header-anchor" href="#正则表达式的标志"><span>正则表达式的标志</span></a></h3><p>正则表达式提供了六个可选标志帮助进行高级搜索，如下所示：</p><table><tr><th>标志</th><th>含义</th></tr><tr><td>i</td><td>不区分大小写搜索</td></tr><tr><td>g</td><td>全局搜索</td></tr><tr><td>m</td><td>多行搜索</td></tr><tr><td>s</td><td>允许.匹配换行符</td></tr><tr><td>u</td><td>使用 unicode 码的模式进行匹配</td></tr><tr><td>y</td><td>执行粘性搜索，匹配从目标字符串的当前位置（lastIndex）开始</td></tr></table><h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环"><span>事件循环</span></a></h2><p>事件循环是 Javascript 用于处理异步操作的一种机制，它允许 Javascript 在执行异步任务时保持响应，而不会阻塞主线程。</p><p>许多文章在提及异步任务时都会将它分为宏任务（macro-task）和微任务（micro-task），但实际上，宏任务这一说法是无从考证的，在相应文档中对应的概念应是任务（task）（在此之后我们将用任务代替宏任务这一说法），此外，还有文章认为任务和微任务是并列关系，实际上，任务和微任务应当是包含关系，每次任务执行时可能会产生微任务，执行这些微任务实际上也是执行任务这一步骤的一部分。</p><p>在了解完以上两点后我们先区分任务和微任务，通常情况下，由宿主环境（浏览器或者 Node）提供的异步任务被视为任务，由 js 引擎提供的异步任务被视为微任务，常见的如下表所示：</p><table><tr><th>任务</th><th>浏览器</th><th>Node</th></tr><tr><td>I/O</td><td>true</td><td>true</td></tr><tr><td>setTimeout</td><td>true</td><td>true</td></tr><tr><td>setInterval</td><td>true</td><td>true</td></tr><tr><td>setImmediate</td><td>false</td><td>true</td></tr><tr><td>requestAnimationFrame</td><td>true</td><td>false</td></tr><tr><td>&lt;script&gt;</td><td>true</td><td>false</td></tr></table><table><tr><th>微任务</th><th>浏览器</th><th>Node</th></tr><tr><td>Promise.then/catch/finally/await之后（不包括与await同一行）的代码</td><td>true</td><td>true</td></tr><tr><td>process.nextTick</td><td>false</td><td>true</td></tr><tr><td>MutationObserver</td><td>true</td><td>false</td></tr></table>`,15),vn=p(`<ol><li>执行所有同步代码。</li><li>按微任务队列先进先出的顺序依次执行所有<strong>可执行</strong>的微任务。</li><li>将此次任务执行过程中解析到的任务添加到任务队列队尾。</li></ol><p>完成以上对一轮任务的执行后，依次执行任务队列中的每一个任务，直至任务队列为空时，事件循环结束。总的来说，事件循环可以看成是双层循环结构，内层循环的主要内容是微任务的执行，外层循环的主要内容是任务的执行。</p><p>接下来看一道题巩固一下（本条参考 3 中有很多例子，感兴趣也可以做一下）：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定时器1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// then-1</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定时器2</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定时器3</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// then-2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定时器4</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>上题的输出应为 124376958，本题的关键点是 then 方法需要 Promise 中的 resolve 方法传值后才会继续向下执行，分析如下：</p><ol><li><p>执行同步代码，输出 1</p></li><li><p>执行同步代码，输出 2</p></li><li><p>微任务队列中的 then-1 方法未收到 resolve 传值，无法执行，then-1 暂存在微任务队列</p></li><li><p>微任务队列中的 then-2 方法未收到 resolve 传值，无法执行，then-2 暂存在微任务队列</p></li><li><p>将定时器 1 和定时器 3 加入任务队列</p></li><li><p>第一轮循环结束，输出了 1、2，任务队列表示为[定时器 1，定时器 3]，微任务队列表示为[then-1，then-2]</p></li><li><p>取出任务队列的队首任务定时器 1</p></li><li><p>执行同步代码，输出 4</p></li><li><p>微任务队列中的 then-1 方法收到 resolve 传值 3，开始执行，输出同步代码 3</p></li><li><p>微任务队列中的 then-2 方法未收到 resolve 传值，无法执行，then-2 暂存在微任务队列</p></li><li><p>将定时器 2 加入任务队列</p></li><li><p>第二轮循环结束，输出了 4、3，任务队列表示为[定时器 3，定时器 2]，微任务队列表示为[then-2]</p></li><li><p>取出任务队列的队首任务定时器 3</p></li><li><p>执行同步代码，输出 7</p></li><li><p>微任务队列中的 then-2 方法收到 resolve 传值 6，开始执行，输出同步代码 6</p></li><li><p>执行同步代码，输出 9</p></li><li><p>将定时器 4 加入任务队列</p></li><li><p>第三轮循环结束，输出了 7、6、9，任务队列表示为[定时器 2，定时器 4]，微任务队列清空</p></li><li><p>取出任务队列的队首任务定时器 2</p></li><li><p>执行同步代码，输出 5</p></li><li><p>第四轮循环结束，输出了 5，任务队列表示为[定时器 4]，微任务队列清空</p></li><li><p>取出任务队列的队首任务定时器 4</p></li><li><p>执行同步代码，输出 8</p></li><li><p>第五轮循环结束，输出了 8，任务队列清空，微任务队列清空</p></li><li><p>事件循环结束</p></li></ol>`,6),wn={href:"https://juejin.cn/post/6844903657264136200",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://juejin.cn/post/7047803809761853477",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://juejin.cn/post/7108751200262029319",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Event_loop",target:"_blank",rel:"noopener noreferrer"},On=n("h2",{id:"dom、bom",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dom、bom"},[n("span",null,"DOM、BOM")])],-1),Sn={href:"https://github.com/febobo/web-interview/issues/76",target:"_blank",rel:"noopener noreferrer"},En=p(`<h2 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收"><span>垃圾回收</span></a></h2><p>本条参考对垃圾回收分析的文章写得十分详细，以下是我阅读后做出的一些浅薄的总结：</p><p>垃圾回收（garbage collection），是指程序在运行过程中会产生很多垃圾，这些垃圾往往是一些程序已经不再需要使用的内存，定期回收这些不可达的内存这一过程就是垃圾回收。垃圾回收是在 js 引擎内完成的，因为垃圾回收机制的存在，通常情况下我们不需要手动去管理内存，但垃圾回收机制也有不完善的地方，有时会出现内存泄漏的情况。理解垃圾回收机制的原理，能够帮助我们更好构建我们的程序。</p><p>垃圾回收算法主要有两类，一种是引用计数算法，另一种是标记清除算法，后者是现在比较通用的垃圾回收算法。</p><h3 id="引用计数算法" tabindex="-1"><a class="header-anchor" href="#引用计数算法"><span>引用计数算法</span></a></h3><p>引用计数是一种早期的垃圾回收算法，它的思想是将“对象是否不再需要”这一判断标准转化为“<strong>有没有其他对象引用了该对象</strong>”。如果将一个引用数据类型赋值给一个变量，那么该引用数据类型的引用值为 1，如果将该引用数据类型再次赋值给另一个变量，那么该引用数据类型的引用值加 1，如果该变量被赋值了新的引用数据类型，那么原先的引用数据类型的引用值减 1。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;goh&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// { name: &quot;goh&quot; }的引用值为1</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// { name: &quot;goh&quot; }的引用值为2</span>
a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lee&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// { name: &quot;goh&quot; }的引用值为1</span>
b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// { name: &quot;goh&quot; }的引用值为0，垃圾回收</span>
</code></pre></div><p>引用计数最大的缺点就是它不能正确处理循环引用的变量，循环引用的引用数据类型始终会被引用（引用值始终不为 0）。如果我们在一个函数作用域中定义了循环引用的值，正常来说，当函数执行完毕后这些变量应当被当作垃圾回收，但由于引用计数的原理限制，这些变量仍会存在于内存中，造成内存泄漏。此外，引用计数还需要有一个计数器进行计数，而计数器需要占用很大的空间。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// a引用b</span>
  b<span class="token punctuation">.</span>name <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// b引用a</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="标记清除算法" tabindex="-1"><a class="header-anchor" href="#标记清除算法"><span>标记清除算法</span></a></h3><p>现今绝大多数浏览器的垃圾回收机制都是基于标记清除算法进行优化的，标记清除的思想是将“对象是否不需要”这一判断标准转化为“<strong>对象是否可以获得</strong>”。算法首先将所有值都标记为垃圾（可以采用 01 一位进行标记，假设垃圾标记为 0），定期从根（即全局对象，通常是 window 或者 document）开始遍历，将不是垃圾（可达）的值标记为 1，遍历结束后清除标记仍为 0 的垃圾，回收占用的内存。 标记清除也有一个明显的缺点，由于垃圾回收之后，剩余对象的内存位置是不变的，这就导致空闲的内存空间不是连续的，产生内存碎片，当对象的内存需求较大时，存在不能找到合适的内存块进行分配的情况，同时，由于内存碎片的存在，我们在分配内存时还需要考虑采取何种内存分配的策略（First-fit、Best-fit、Worst-fit），这就导致了占用内存较大的对象的分配效率低。</p><h3 id="对标记清除算法的优化" tabindex="-1"><a class="header-anchor" href="#对标记清除算法的优化"><span>对标记清除算法的优化</span></a></h3><p>标记清除算法缺点的产生可以归因于内存碎片的出现，也就是说，如果可以将不连续的空闲内存块转化为连续的空闲内存块，标记清除就可以得到优化。基于这种观点，人们提出了<strong>标记整理算法</strong>。标记整理算法是在标记清除算法结束后，将不是垃圾的对象集体向内存的一端移动，最后将垃圾进行回收，这样就解决了内存碎片的问题。 <img src="`+u+'" alt="标记整理算法图示"> 大多数 Javascript 引擎的垃圾回收算法都是基于标记清除算法进行优化的，V8 引擎亦是如此。标记清除算法在进行垃圾回收时需要反复检查内存中的所有对象，但是，一些老的、大的、存活时间长的对象并不需要频繁进行清理，也就是说，这些对象的检查频率应当比那些新的、小的、存活时间短的对象更低一些，对此，V8 引擎的垃圾回收机制使用了基于标记整理算法的<strong>分代式算法</strong>。</p><p>分代式算法就是将堆内存分为新生代和老生代两个区域，分别使用两个垃圾回收器管理这两个区域。 <img src="'+i+'" alt="分代式算法图示"> 其中，新生代区域被分为使用区和空闲区两个区域，新加入的对象都会被加入到使用区，当<strong>使用区即将被写满</strong>时便执行一次垃圾回收操作。当垃圾回收操作开始时，新生代的垃圾回收器会首先对使用区的<strong>活动对象</strong>进行标记，标记完成后将这些活动对象<strong>复制到空闲区</strong>中并进行排序，之后对使用区中的<strong>非活动对象</strong>进行垃圾回收，然后<strong>交换</strong>使用区和空闲区。如果一个对象经过多次复制后仍然存活，那么它会被认定为生命周期较长的对象，从而移入到老生代区域中。此外，如果一个对象被复制到空闲区时占据了空闲区<strong>25%以上</strong>的内存，那么这个对象也会直接被移入到老生代区域中，因为空闲区翻转为使用区时如果内存占用过大，会影响后续的内存分配。 <img src="'+k+'" alt="使用区空闲区示意图"> 而老生代区域中存放的对象往往是内存占用较大、生命周期较长的对象，因此直接使用标记整理算法进行垃圾回收即可。</p><p>Javascript 是一门单线程的语言，它是运行在主线程上的，这也就意味着垃圾回收往往会阻塞 Javascript 脚本的运行，这种行为被称为<strong>全停顿</strong>。全停顿意味着垃圾回收的时间越长，那么脚本被阻塞的时间也就越长。V8 引擎为了缓解全停顿带来的影响，引入了<strong>并行回收机制</strong>，并行回收是指垃圾回收器在主线程上执行任务的过程开启多个辅助线程，原先 60ms 的工作如果有 2 个辅助线程存在即可缩短至 20ms（不计同步开销的情况下），新生代区域进行垃圾回收就采用了并行回收机制。 <img src="'+r+'" alt="并行回收机制示意图"> 由于老生代区域中存放的对象大都占用内存较大，即使采用并行回收也仍会占用主线程过多的时间。为了减少全停顿的时间，V8 对老生代的标记方法进行了优化，从全停顿标记切换为<strong>增量标记</strong>。增量是指将垃圾回收标记的过程分为多个小步骤，每执行一个小步骤就执行让脚本执行一会，交替执行直至一次垃圾回收完成。 <img src="'+d+'" alt="增量标记示意图"> 增量回收最大的问题就是如何判断垃圾回收进行到了什么位置，传统的 01 双色标记方法无法解决这一问题，因此改用了<strong>三色标记法</strong>。三色标记法即采用两个标记位编码黑白灰三种颜色，其中，白色是指尚未标记过的对象；灰色是指对象自身被标记过了，但是该对象的引用对象仍未被标记；黑色则是指该对象及其引用对象均已被标记。增量回收的过程，每次恢复执行垃圾回收时，通过判断是否存在灰色标记的对象即可判断垃圾回收的进度，恢复到上一次增量的位置。三色标记法配合增量回收可以在不扫描全部内存的情况下进行暂停恢复操作，从而减少了全停顿的时间。 <img src="'+g+'" alt="三色标记法示意图"> 在增量回收的过程中，如果我们在垃圾回收的一个增量分段上将某个对象 A 及其引用对象 B 标记为黑色（活动对象），紧接着执行 Javascript 脚本，此时脚本中将对象 A 的引用对象修改为对象 C，在下一个垃圾回收的增量片段这里会出现两个问题：一是对象 B 已不再被引用，需要被垃圾回收器回收，但由于其已经被标记为黑色无法被回收（这个问题可以不考虑，因为下一轮垃圾回收时该对象也会被回收）；二是新的引用对象的标记是白色的，而此时内存中又不存在标记为灰色的对象，因此新的引用对象 C 会被垃圾回收器直接回收，显然这是不正确的。为了解决这个问题，V8 引入了<strong>写屏障</strong>机制，即一旦有黑色标记的对象引用白色对象，立即将白色对象的标记转变为灰色，这个机制也被称作<strong>强三色不变性</strong>。 <img src="'+m+'" alt="写屏障示意图"> 增量标记只是用于对对象进行标记区分，对应于标记清除算法中的标记操作，而清除操作对应的则是<strong>惰性清除</strong>操作。惰性清除是指每次增量标记结束后，如果当前的可用内存可以让我们快速执行代码，清除操作可以稍微延迟一下，先让 Javascript 代码执行，无需一次性清除所有的非活动对象。</p>',15),Nn=n("strong",null,"并发回收",-1),In=n("img",{src:h,alt:"并发执行示意图"},null,-1),Cn={href:"https://juejin.cn/post/6981588276356317214",target:"_blank",rel:"noopener noreferrer"},An=p(`<h2 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏"><span>内存泄漏</span></a></h2><p>Javascript 引擎的垃圾回收机制在我们无感的情况下帮助我们回收大部分不再被需要的对象占用的内存，但是，垃圾回收并不能确保所有的垃圾都被回收，如果我们不手动回收这些垃圾，就会造成<strong>内存泄漏</strong>，以下是一些内存泄漏的常见案例：</p><h3 id="闭包-1" tabindex="-1"><a class="header-anchor" href="#闭包-1"><span>闭包</span></a></h3><p>闭包是一个有权访问另一个函数内部变量的函数，如下代码就会出现内存泄漏的情况：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">memoryLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;goh&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> closure <span class="token operator">=</span> <span class="token function">memoryLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>由于变量 a 在闭包中被引用，因此其不会被垃圾回收器回收，这就造成了内存泄漏，解决这一问题只需在 closure 执行完毕后将 closure 置空，即<code>closure = null</code></p><h3 id="隐式全局变量" tabindex="-1"><a class="header-anchor" href="#隐式全局变量"><span>隐式全局变量</span></a></h3><p>在非严格模式下，当我们在函数作用域中不使用关键字 var/let/const 声明变量时，这些变量就会自动转换为全局变量，对于全局变量，垃圾回收器很难判断它们什么时候是不被需要的，因此通常情况下全局变量不会被自动回收，如下所示：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">memoryLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;goh&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;blank&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// this指向了window，也会创建全局变量</span>
<span class="token punctuation">}</span>
</code></pre></div><p>解决办法就是在声明变量要使用关键字声明，此外，在函数外也不可避免地会使用全局变量，最好的做法是在该变量不再被需要的时候主动回收该变量，将该变量置空，即<code>a = null</code></p><h3 id="游离-dom-引用" tabindex="-1"><a class="header-anchor" href="#游离-dom-引用"><span>游离 DOM 引用</span></a></h3><p>考虑到性能和代码简洁性，我们在进行 DOM 操作时往往会使用变量缓存对 DOM 节点的引用，因此在移除节点时，我们也需要回收这些引用了 DOM 节点的变量，防止产生游离 DOM，造成内存泄漏，如下是一个游离 DOM 的例子：</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ul<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>li<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 由于变量ul仍然存在，即使DOM上的ul已经被移除（不再需要），垃圾回收器仍不能ul元素及其子元素其回收</span>
    root<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>ul<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 尽管将变量ul置空了，但变量li仍引用了DOM节点，所以ul元素仍不能被回收</span>
    ul <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 所有变量引用都清除了，可以被回收</span>
    li <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><img src="`+f+`" alt="游离DOM示意图"></p><h3 id="遗忘的定时器" tabindex="-1"><a class="header-anchor" href="#遗忘的定时器"><span>遗忘的定时器</span></a></h3><p>定时器在完成任务后如果不手动清除，也会造成内存泄漏，需要手动调用相应 API 清除定时器:</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 获取数据</span>
<span class="token keyword">let</span> someResource <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;Node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>someResource<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>上述例子中，因为定时器没有被手动清除，定时器内始终需要使用变量 someResource，someResource 占用的内存始终无法被回收，需要我们手动清除定时器来回收内存，即<code>clearInterval(id)</code></p>`,18),Mn={href:"https://juejin.cn/post/6984188410659340324",target:"_blank",rel:"noopener noreferrer"},Tn=p(`<h2 id="本地存储" tabindex="-1"><a class="header-anchor" href="#本地存储"><span>本地存储</span></a></h2><p>Javascript 本地存储的方式主要有四种：cookie、localStorage、sessionStorage、indexedDB。</p><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span>cookie</span></a></h3><p>cookie 本身并不是为了解决在浏览器上存储东西而被发明的，实际上它是为了解决 HTTP 协议无状态而被提出的，也就是说，cookie 是用来作<strong>状态存储</strong>的，内部以键值对的方式存储。cookie 的工作流程如下：</p><ol><li>当用户访问 web 服务器时，web 服务器会获取用户的状态并返回一些数据（cookie）给浏览器，浏览器会自动存储这些数据。</li><li>当用户再次访问 web 服务器时，浏览器会把 cookie 添加到请求报文中发送给 web 服务器，web 服务器就获取到了用户的状态。 cookie 的缺点也很明显。首先是容量缺陷，cookie 是小型文本文件，可存储的内容大小一般不超过 4KB；此外还有安全缺陷，cookie 是以纯文本在浏览器和服务器之间进行传递的，很容易遭受 XSS（跨站脚本攻击，借用 script）攻击和 CSRF（跨站请求伪造，借用 cookie）攻击。</li></ol><p>浏览器访问 cookie 可以通过<code>document.cookie</code>进行获取，设置和删除 cookie 的方式如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;username=blank; max-age=10; path=/&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 设置cookie</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;username=; max-age=10&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 删除cookie</span>
</code></pre></div><p>其中，max-age 表示 cookie 的有效时长（单位为秒），也可以用 expires（绝对时间点）代替，max-age 的优先级比 expires 更高。</p><h3 id="localstorage、sessionstorage" tabindex="-1"><a class="header-anchor" href="#localstorage、sessionstorage"><span>localStorage、sessionStorage</span></a></h3><p>localStorage 和 sessionStorage 都是 HTML5 提出的新的浏览器本地存储的方案。</p><p>localStorage 和 sessionStorage 的使用方法基本一致，两者主要区别有两个，一是<strong>生命周期不同</strong>，sessionStorage 保存的数据仅在当前会话期间生效，一旦关闭浏览器就会被删除，而 localStorage 保存的数据没有过期时间，除非手动清除浏览器缓存或者调用相应 API 进行删除；二是<strong>访问权限不同</strong>，sessionStorage 保存的数据仅在当前标签页可以被访问，不同标签页之间的数据是隔离的，localStorage 保存的数据则对同一域名下的所有标签页可见，可以相互访问。</p><p>相比于 cookie，localStorage 和 sessionStorage 的存储空间更大(5MB 以上，不同浏览器有不同的标准)，采用键值对的方式存储数据，但 localStorage 和 sessionStorage 的缺点也很明显，它们只能用来存储字符串类型的数据。</p><p>以下是 localStorage 和 sessionStorage 共用的 API：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>sessionStorage 常用于存储表单数据，即使刷新页面也不会丢失数据，localStorage 常用于记住账号和密码，即使关闭浏览器下次启动时也无需重新输入。</p><h3 id="indexeddb" tabindex="-1"><a class="header-anchor" href="#indexeddb"><span>indexedDB</span></a></h3>`,16),Pn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://juejin.cn/post/7158414568950071309",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ",target:"_blank",rel:"noopener noreferrer"},Ln=n("h2",{id:"函数式编程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#函数式编程"},[n("span",null,"函数式编程")])],-1),Bn={href:"https://zhuanlan.zhihu.com/p/81302150",target:"_blank",rel:"noopener noreferrer"},Dn=p(`<h2 id="精度丢失" tabindex="-1"><a class="header-anchor" href="#精度丢失"><span>精度丢失</span></a></h2><p>Javascript 以 64 位（8 个字节）双精度浮点数存储所有 Number 值，包括整数和浮点数。因为存储时有位数限制（64 位），并且某些十进制的浮点数在转换为二进制数时会出现无限循环，会造成二进制的舍入操作(0 舍 1 入)，当再转换为十进制时就造成了计算误差。 常见的解决办法是使用 Math.js 等第三方库，以下是一个简单的解决办法：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">addPolyfill</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> lengthOfA <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> lengthOfB <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> powNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lengthOfA<span class="token punctuation">,</span> lengthOfB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> powNum <span class="token operator">+</span> b <span class="token operator">*</span> powNum<span class="token punctuation">)</span> <span class="token operator">/</span> powNum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),Jn={href:"https://zhuanlan.zhihu.com/p/100353781",target:"_blank",rel:"noopener noreferrer"},zn=p(`<h2 id="防抖和节流" tabindex="-1"><a class="header-anchor" href="#防抖和节流"><span>防抖和节流</span></a></h2><p>防抖（debounce）和节流（throttle）都是前端用于性能优化的技术。防抖是指在一段连续操作后，只执行最新一次的相关操作，常用于搜索框输入完毕后再发送请求、手机号验证格式、窗口调整大小等；节流是指在一定时间间隔内只执行一次操作，无论连续操作有多频繁，都会按照设定的时间间隔执行一次，常用于滚动加载、搜索框联想加载等。</p><p>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效。</p><p>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个变量用于缓存最新输入的参数</span>
  <span class="token keyword">let</span> argsArr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建一个变量用于判断是否存在定时器</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回一个带有节流功能的新函数</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">newFn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据timer判断函数是否正在执行，是则将最新参数缓存在argsArr中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      argsArr <span class="token operator">=</span> args<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 否则立即执行函数，并创建定时器表示函数正在执行</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 延时完成后，清除定时器表示函数已经执行完成</span>
        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断缓存中是否有新的参数，有则立即执行</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>argsArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">newFn</span><span class="token punctuation">(</span><span class="token operator">...</span>argsArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
          argsArr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个变量用于判断是否存在定时器</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回一个具有防抖功能的新函数</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否存在正在执行的函数，存在则将其清除</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使用新的参数执行该函数</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,6),Wn={href:"https://leetcode.cn/problems/throttle/",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://leetcode.cn/problems/debounce/",target:"_blank",rel:"noopener noreferrer"},Xn=p('<h2 id="判断一个元素是否在视口中" tabindex="-1"><a class="header-anchor" href="#判断一个元素是否在视口中"><span>判断一个元素是否在视口中</span></a></h2><p>要想判断一个元素是否在视口当中，我们可以通过文档、视口、元素这三者之间的距离进行判断，如下图所示： <img src="'+y+`" alt="视口、文档、元素之间的关系"> 其中，蓝色为文档，红色为视口，黄色为元素，元素始终固定在文档的同一位置上，而视口则随着用户的滚动行为在文档上移动。</p><p>根据图示，我们可以将“元素是否在视口中”这一问题转换为“文档顶部到视口底部的距离是否大于文档顶部到元素顶部的距离(元素进入视口)，文档顶部到视口顶部的距离是否大于文档顶部到元素底部的距离（元素离开视口）”。文档顶部到视口底部的距离可以拆分为两部分：文档顶部到视口顶部的距离（滚动距离）+视口的高度，即<code>window.scrollY + window.innerHeight</code>，而文档顶部到元素顶部的距离可以通过<code>element.offsetTop</code>获得，文档顶部到元素底部的距离也可以拆分成文档顶部到元素顶部的距离和元素自身高度两部分，即<code>element.offsetTop + element.offHeight</code>，具体代码如下：</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">#root</span> <span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid pink<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 2000px 30px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      window<span class="token punctuation">.</span>scrollY <span class="token operator">+</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">&gt;=</span> div<span class="token punctuation">.</span>offsetTop <span class="token operator">&amp;&amp;</span>
      window<span class="token punctuation">.</span>scrollY <span class="token operator">&lt;=</span> div<span class="token punctuation">.</span>offsetTop <span class="token operator">+</span> div<span class="token punctuation">.</span>offsetHeight
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>上述写法存在一定程度的缺陷，当元素的<code>offsetParent</code>不为<code>body</code>时，<code>offsetTop</code>属性就不再表示文档顶部到元素顶部的距离了，这时候我们可以采用<code>getBoundingClientRect</code>方法来获取视口与元素之间的关系进行判断。<code>Element.getBoundingClientRect</code>方法返回一个 DOMRect 对象，其提供了元素的大小及其相对于视口的位置，主要包含六个属性，分别是 top（视口顶部到元素顶部），bottom（视口顶部到元素底部），left（视口左侧到元素左侧），right（视口左侧到元素右侧），width，height。</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#root</span> <span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid pink<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 2000px 30px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#outer</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 3000px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 3000px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 3000px 30px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      div<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">&lt;=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">&amp;&amp;</span>
      div<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bottom <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
      div<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left <span class="token operator">&lt;=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">&amp;&amp;</span>
      div<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>right <span class="token operator">&gt;=</span> <span class="token number">0</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>上述写法需要频繁调用<code>Element.getBoundingClientRect()</code>方法以获取相关元素的边界信息，且需要监听用户的滚动、窗口调整、视口的横纵变化等事件，而事件监听和<code>Element.getBoundingClientRect()</code>都是在主线程上执行的，因此频繁调用会出现性能问题，因此我们还可以使用<code>Intersection Observer API</code>，该 API 会注册一个回调函数，当监视的元素进入或离开另一个元素（不指定的情况下为视口），或者两个元素的相交部分发生变化时，执行该回调函数。</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#root</span> <span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid pink<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 2000px 30px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#outer</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 3000px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 3000px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 3000px 30px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,8),Vn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://juejin.cn/post/7300036605100130358",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://juejin.cn/post/7300122001767301120",target:"_blank",rel:"noopener noreferrer"},Gn=p(`<h2 id="下拉刷新和上拉加载" tabindex="-1"><a class="header-anchor" href="#下拉刷新和上拉加载"><span>下拉刷新和上拉加载</span></a></h2><p>下拉刷新和上拉加载可以理解为视口与文档（元素，如列表等）之间的关系，当视口超出文档顶部时，触发下拉刷新，当视口超出文档时，触发上拉加载。通常我们会在移动端使用到下拉刷新和上拉加载，相关代码如下：（如果需要在 PC 端使用下拉刷新，则需要将监听的<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>分别修改为<code>mousedown</code>、<code>mousemove</code>、<code>mouseup</code>）</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>PC端下拉刷新和上拉加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">#container</span> <span class="token punctuation">{</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
        <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">#list</span> <span class="token punctuation">{</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> transform 0.3s ease<span class="token punctuation">;</span>
        <span class="token comment">/* 添加 transform 属性的过渡效果 */</span>
        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">#list::before</span> <span class="token punctuation">{</span>
        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;refreshing...&quot;</span><span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> -40px<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">#list::after</span> <span class="token punctuation">{</span>
        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;loading...&quot;</span><span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">bottom</span><span class="token punctuation">:</span> -40px<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">#list li</span> <span class="token punctuation">{</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
        <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
        <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">.loading</span> <span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50px<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 上拉加载时移动列表 */</span>
      <span class="token punctuation">}</span>

      <span class="token selector">.refreshing</span> <span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 下拉刷新时移动列表 */</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 初始内容 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Item 20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 更多列表项... --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> isFetching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

      <span class="token comment">// 下拉刷新</span>
      container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;touchstart&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> startY <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>
        <span class="token comment">// const startY = e.clientY;    // PC端</span>
        <span class="token keyword">const</span> <span class="token function-variable function">handleMouseMove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> currentY <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>
          <span class="token comment">// const currentY = event.clientY;   // PC端</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>currentY <span class="token operator">-</span> startY <span class="token operator">&gt;</span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isFetching<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isFetching <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;refreshing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加类以触发动画效果</span>
            <span class="token function">simulateRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟刷新数据的函数</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> <span class="token function-variable function">handleMouseUp</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;touchmove&quot;</span><span class="token punctuation">,</span> handleMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
          document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;touchend&quot;</span><span class="token punctuation">,</span> handleMouseUp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;touchmove&quot;</span><span class="token punctuation">,</span> handleMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;touchend&quot;</span><span class="token punctuation">,</span> handleMouseUp<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 上拉加载</span>
      container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;scroll&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          container<span class="token punctuation">.</span>scrollTop <span class="token operator">+</span> container<span class="token punctuation">.</span>clientHeight <span class="token operator">&gt;=</span>
            container<span class="token punctuation">.</span>scrollHeight <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span>
          <span class="token operator">!</span>isFetching
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          isFetching <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          list<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;loading&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加类以触发动画效果</span>
          <span class="token function">simulateLoadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟加载更多数据的函数</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">function</span> <span class="token function">simulateRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          isFetching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          list<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;refreshing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除类以结束动画效果</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟异步操作</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">function</span> <span class="token function">simulateLoadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> newItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          newItem<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&quot;Item &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>childElementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
          isFetching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          list<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;loading&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除类以结束动画效果</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟异步操作</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="web-常见的攻击方式" tabindex="-1"><a class="header-anchor" href="#web-常见的攻击方式"><span>Web 常见的攻击方式</span></a></h2><p>Web 常见的攻击方式有 XSS（跨站脚本攻击）、CSRF（跨站请求伪造）、SQL 注入。</p><p>跨站脚本攻击（XSS）是指攻击者注入恶意脚本到网页中，用户访问网页时执行该脚本，导致攻击者能够窃取用户信息。举例说明，当一个博客系统允许用户输入文本进行评论并展示在评论区，此时攻击者输入<code>&lt;script&gt;alert(&quot;attack&quot;)&lt;/script&gt;</code>，那么其他用户在查看评论区时就会执行该恶意脚本，弹出弹窗。针对跨站脚本攻击，我们可以对用户的输入进行合适的转义（通常是&lt;、&gt;、&amp;、&quot;、&#39;这些字符），使用 innerText 而非 innerHTML 将用户输入到 DOM 中。</p><p>XSS 攻击基于<strong>攻击载体和实施方式</strong>还可以细分为存储型 XSS、反射型 XSS 和 DOM 型 XSS，上述提及的例子为存储型 XSS，其攻击载体为目标网页的服务器，通常是数据库或者文件系统；当用户访问含恶意脚本的网页时，服务器从存储中取出包含了该恶意脚本的内容发送给用户，用户的浏览器解析并执行该脚本，所有访问了包含该恶意脚本页面的用户都会被影响。而反射型 XSS 的攻击载体为恶意构造的 URL，如<code>http://example.com/search?query=&lt;script&gt;alert(&#39;Reflected XSS Attack&#39;);&lt;/script&gt;</code>，当用户打开带有恶意脚本的 URL 时，网站服务端将恶意脚本从 URL 中取出，拼接在 HTML 中返回给浏览器，浏览器再执行返回结果中的恶意代码。DOM 型 XSS 的恶意脚本的攻击载体也为恶意构造的 URL，不同于反射型 XSS 的是，DOM 型 XSS 的恶意脚本的取出和执行两个流程都是在浏览器端完成的。反射型 XSS 和 DOM 型 XSS 都要求用户点击恶意链接来触发攻击。</p><p>跨站伪造请求（CSRF）是指攻击者伪造合法用户的请求，利用用户在目标站点的身份进行非法操作。举例说明，一个用户在某个在线银行系统处于登陆状态，然后访问了一个恶意网站，该网站存在一张图片，图片的 src 指向了银行系统的转账地址，如果用户点击了该图片，就会无感地向攻击者进行转账，如下代码所示。针对跨站请求伪造，我们可以使用 CSRF 令牌。在用户登录时，服务器为用户生成一个唯一的 CSRF 令牌，并关联到用户的会话中，在包含敏感操作的表单中，将 CSRF 令牌作为一个隐藏的表单字段，这样攻击者如果无法获取到会话 id，就无法伪造身份向服务器发送请求了。（防止攻击者获取到会话 id：HttpOnly+Secure，阻止脚本访问 cookie，并且只能在 HTTPS 连接中传输会话 id；为令牌设置一个较短的生命周期；对令牌进行加密等方式）</p><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 银行系统 --&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>转账页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/transfer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transferForm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>amount<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>转账金额：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>amount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>amount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">required</span> <span class="token punctuation">/&gt;</span></span>
      <span class="token comment">&lt;!-- 隐藏的表单字段 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>csrf_token<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>生成的CSRF令牌<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交转账<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 恶意网站 --&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>恶意网站<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>点击下面的图片，你将会捐赠1000美元给我！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://bank.com/transfer?amount=1000<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>点击捐赠<span class="token punctuation">&quot;</span></span>
      <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span>
    <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">function</span> <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在用户不知情的情况下，提交银行系统的转账表单</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;transferForm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>SQL 注入是指攻击者通过在用户输入中注入恶意的 SQL 代码，试图篡改数据库查询。举例说明，某个登陆页面接受用户名和密码进行身份验证，身份验证的语句为<code>SELECT * FROM users WHERE username = &#39;输入的用户名&#39; AND password = &#39;输入的密码&#39;;</code>，若攻击者在用户名输入框中输入<code> OR &#39;1&#39;=&#39;1&#39;; --</code>，那么通过字符串拼接后的查询语句就为<code>SELECT * FROM users WHERE username = &#39;&#39; OR &#39;1&#39;=&#39;1&#39;; --&#39; AND password = &#39;&#39;;</code>，由于<code>&#39;1&#39;=&#39;1&#39;</code>始终为真，且<code>--</code>为注释符，后续的查询内容会被注释掉，这就导致查询语句返回所有用户的记录，攻击者成功绕过身份验证，获得未经授权的访问。针对 SQL 注入，我们可以采用参数化查询或预编译语句，如使用绑定参数的形式：<code>SELECT * FROM users WHERE username = ? AND password = ?;</code>。</p><h2 id="单点登录" tabindex="-1"><a class="header-anchor" href="#单点登录"><span>单点登录</span></a></h2>`,12),$n={href:"https://juejin.cn/post/6881945458471550983",target:"_blank",rel:"noopener noreferrer"},Kn={href:"https://juejin.cn/post/6844903664985866253",target:"_blank",rel:"noopener noreferrer"};function Zn(ns,ss){const a=e("ExternalLinkIcon");return c(),l("div",null,[q,n("p",null,[n("a",v,[s("本条参考 1"),t(a)]),n("a",w,[s("本条参考 2"),t(a)])]),j,n("p",null,[n("a",x,[s("更多例子查看"),t(a)])]),_,n("ol",null,[O,n("li",null,[S,E,N,I,C,n("p",null,[n("a",A,[s("本条参考"),t(a)])])])]),M,n("ol",T,[n("li",null,[n("p",null,[P,s(" 这是一个全局方法，缺陷可"),n("a",F,[s("参见这条"),t(a)])]),n("p",null,[n("a",R,[s("本条参考"),t(a)])])])]),L,n("p",null,[n("a",B,[s("本条参考"),t(a)])]),D,J,z,W,n("p",null,[n("a",H,[s("本条参考"),t(a)])]),X,n("p",null,[n("a",V,[s("本条参考"),t(a)])]),Y,n("p",null,[n("a",U,[s("本条参考"),t(a)])]),Q,n("p",null,[n("a",G,[s("本条参考 1"),t(a)]),n("a",$,[s("本条参考 2"),t(a)])]),K,n("p",null,[n("a",Z,[s("本条参考 1"),t(a)]),n("a",nn,[s("本条参考 2"),t(a)])]),sn,an,tn,pn,on,n("p",null,[n("a",en,[s("eval"),t(a)]),s("函数内部的代码也会生成独立的执行上下文，但由于 eval 并不常用且不推荐使用，因此这里不做过多介绍。")]),cn,n("p",null,[n("a",ln,[s("本条参考 1"),t(a)]),n("a",un,[s("本条参考 2"),t(a)]),n("a",kn,[s("本条参考 3"),t(a)])]),rn,n("p",null,[n("a",dn,[s("本条参考 1"),t(a)]),n("a",gn,[s("本条参考 2"),t(a)])]),mn,s(" 此外，我们可以通过实例属性status获取相应状态码，相应状态码及其对应信息如下： "),hn,n("p",null,[n("a",fn,[s("本条参考 1"),t(a)]),n("a",yn,[s("本条参考 2"),t(a)]),n("a",bn,[s("本条参考 3"),t(a)])]),qn,s(" 总的来说，事件循环就是不断执行任务的过程，一轮任务的执行可分为以下几个步骤： "),vn,n("p",null,[n("a",wn,[s("本条参考 1"),t(a)]),n("a",jn,[s("本条参考 2"),t(a)]),n("a",xn,[s("本条参考 3"),t(a)]),n("a",_n,[s("本条参考 4"),t(a)])]),On,n("p",null,[s("BOM：Window、Navigator、Location（protocol、hostname、port、host、pathname、search、hash、href、reload）、History（go、back、forward）、Screen "),n("a",Sn,[s("参见本条"),t(a)])]),En,n("p",null,[s("增量标记和惰性清除有效减少了全停顿的时间，用户和浏览器的交互变得更为流畅，但实际上垃圾回收这一过程在主线程上的总暂停时间是不变的，甚至会略微增加，同时由于写屏障机制的使用，程序的吞吐量也会有所下降。对此，还有一种垃圾回收策略————"),Nn,s("，并发回收是指主线程在执行 Javascript 代码时，辅助线程可以在后台进行垃圾回收，并发回收的优点也是他最大的难点，需要引入读写锁机制来控制对象的读和写。 "),In,n("a",Cn,[s("本条参考 1"),t(a)])]),An,n("p",null,[n("a",Mn,[s("本条参考 1"),t(a)])]),Tn,n("p",null,[s("相比于 storage，indexedDB 支持存储更大量的数据。indexedDB 是非关系型数据库，操作较为繁琐，如果想要了解如何使用 indexedDB，请参见"),n("a",Pn,[s("这条"),t(a)])]),n("p",null,[n("a",Fn,[s("本条参考 1"),t(a)])]),n("p",null,[n("a",Rn,[s("本条参考 2"),t(a)])]),Ln,n("p",null,[n("a",Bn,[s("本条参考"),t(a)])]),Dn,n("p",null,[n("a",Jn,[s("本条参考"),t(a)])]),zn,n("p",null,[n("a",Wn,[s("本条参考 1"),t(a)])]),n("p",null,[n("a",Hn,[s("本条参考 2"),t(a)])]),Xn,n("p",null,[n("a",Vn,[s("本条参考 1"),t(a)])]),n("p",null,[n("a",Yn,[s("本条参考 2"),t(a)])]),n("p",null,[n("a",Un,[s("本条参考 3"),t(a)])]),n("p",null,[n("a",Qn,[s("本条参考 4"),t(a)])]),Gn,n("p",null,[n("a",$n,[s("本条参考 1"),t(a)]),n("a",Kn,[s("本条参考 2"),t(a)])])])}const ts=o(b,[["render",Zn],["__file","javascript.html.vue"]]),ps=JSON.parse('{"path":"/learn/javascript.html","title":"Javascript","lang":"zh-CN","frontmatter":{},"headers":[{"level":1,"title":"Javascript","slug":"javascript","link":"#javascript","children":[{"level":2,"title":"Javascipt 的数据类型","slug":"javascipt-的数据类型","link":"#javascipt-的数据类型","children":[]},{"level":2,"title":"数据类型检测办法","slug":"数据类型检测办法","link":"#数据类型检测办法","children":[]},{"level":2,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":2,"title":"基本数据类型和构造函数","slug":"基本数据类型和构造函数","link":"#基本数据类型和构造函数","children":[]},{"level":2,"title":"常用的数组方法","slug":"常用的数组方法","link":"#常用的数组方法","children":[]},{"level":2,"title":"常用的字符串方法","slug":"常用的字符串方法","link":"#常用的字符串方法","children":[]},{"level":2,"title":"var、let、const 的区别","slug":"var、let、const-的区别","link":"#var、let、const-的区别","children":[]},{"level":2,"title":"==和===","slug":"和","link":"#和","children":[]},{"level":2,"title":"深拷贝和浅拷贝","slug":"深拷贝和浅拷贝","link":"#深拷贝和浅拷贝","children":[]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":2,"title":"作用域和作用域链","slug":"作用域和作用域链","link":"#作用域和作用域链","children":[]},{"level":2,"title":"原型和原型链","slug":"原型和原型链","link":"#原型和原型链","children":[]},{"level":2,"title":"类与继承","slug":"类与继承","link":"#类与继承","children":[]},{"level":2,"title":"apply、bind、call","slug":"apply、bind、call","link":"#apply、bind、call","children":[]},{"level":2,"title":"this","slug":"this","link":"#this","children":[]},{"level":2,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":2,"title":"事件、事件流、事件处理器（事件模型、事件监听器）、事件委托","slug":"事件、事件流、事件处理器-事件模型、事件监听器-、事件委托","link":"#事件、事件流、事件处理器-事件模型、事件监听器-、事件委托","children":[]},{"level":2,"title":"new 运算","slug":"new-运算","link":"#new-运算","children":[]},{"level":2,"title":"AJAX","slug":"ajax","link":"#ajax","children":[]},{"level":2,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[]},{"level":2,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[]},{"level":2,"title":"DOM、BOM","slug":"dom、bom","link":"#dom、bom","children":[]},{"level":2,"title":"垃圾回收","slug":"垃圾回收","link":"#垃圾回收","children":[]},{"level":2,"title":"内存泄漏","slug":"内存泄漏","link":"#内存泄漏","children":[]},{"level":2,"title":"本地存储","slug":"本地存储","link":"#本地存储","children":[]},{"level":2,"title":"函数式编程","slug":"函数式编程","link":"#函数式编程","children":[]},{"level":2,"title":"精度丢失","slug":"精度丢失","link":"#精度丢失","children":[]},{"level":2,"title":"防抖和节流","slug":"防抖和节流","link":"#防抖和节流","children":[]},{"level":2,"title":"判断一个元素是否在视口中","slug":"判断一个元素是否在视口中","link":"#判断一个元素是否在视口中","children":[]},{"level":2,"title":"下拉刷新和上拉加载","slug":"下拉刷新和上拉加载","link":"#下拉刷新和上拉加载","children":[]},{"level":2,"title":"Web 常见的攻击方式","slug":"web-常见的攻击方式","link":"#web-常见的攻击方式","children":[]},{"level":2,"title":"单点登录","slug":"单点登录","link":"#单点登录","children":[]}]}],"git":{},"filePathRelative":"learn/javascript.md"}');export{ts as comp,ps as data};
